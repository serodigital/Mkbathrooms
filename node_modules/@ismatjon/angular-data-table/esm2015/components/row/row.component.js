import * as tslib_1 from "tslib";
import { Component, Input, Inject, forwardRef, Output, EventEmitter } from '@angular/core';
import { DataTable } from '../table/table.component';
let DataTableRow = class DataTableRow {
    constructor(dataTable) {
        this.dataTable = dataTable;
        this._this = this; // FIXME is there no template keyword for this in angular 2?
        this.selectedChange = new EventEmitter();
    }
    get selected() {
        return this._selected;
    }
    set selected(selected) {
        this._selected = selected;
        this.selectedChange.emit(selected);
    }
    // other:
    get displayIndex() {
        if (this.dataTable.pagination) {
            return this.dataTable.displayParams.offset + this.index + 1;
        }
        else {
            return this.index + 1;
        }
    }
    getTooltip() {
        if (this.dataTable.rowTooltip) {
            return this.dataTable.rowTooltip(this.item, this, this.index);
        }
        return '';
    }
    ngOnDestroy() {
        this.selected = false;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTableRow.prototype, "item", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], DataTableRow.prototype, "index", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], DataTableRow.prototype, "selectedChange", void 0);
DataTableRow = tslib_1.__decorate([
    Component({
        selector: '[dataTableRow]',
        template: "<tr\n  class=\"data-table-row\"\n  [title]=\"getTooltip()\"\n  [style.background-color]=\"dataTable.getRowColor(item, index, _this)\"\n  [class.row-odd]=\"index % 2 === 0\"\n  [class.row-even]=\"index % 2 === 1\"\n  [class.selected]=\"selected\"\n  [class.clickable]=\"dataTable.selectOnRowClick\"\n  (dblclick)=\"dataTable.rowDoubleClicked(_this, $event)\"\n  (click)=\"dataTable.rowClicked(_this, $event)\"\n>\n  <td [hide]=\"!dataTable.expandColumnVisible\">\n    <div\n      tabindex=\"0\"\n      role=\"button\"\n      (click)=\"expanded = !expanded; $event.stopPropagation()\"\n      class=\"row-expand-button\"\n      [attr.aria-expanded]=\"expanded\"\n      [title]=\"dataTable.translations.expandRow\"\n      [attr.aria-label]=\"dataTable.translations.expandRow\"\n    >\n      <span\n        class=\"fa\"\n        [ngClass]=\"{\n          'fa-caret-right': !expanded,\n          'fa-caret-bottom': expanded\n        }\"\n        aria-hidden=\"true\"\n      ></span>\n    </div>\n  </td>\n  <td [hide]=\"!dataTable.indexColumnVisible\" class=\"index-column\">\n    {{ displayIndex }}\n  </td>\n  <td [hide]=\"!dataTable.selectColumnVisible\" class=\"select-column\">\n    <input type=\"checkbox\" [(ngModel)]=\"selected\" />\n  </td>\n  <td\n    *ngFor=\"let column of dataTable.columns\"\n    [hide]=\"!column.visible\"\n    [ngClass]=\"column.styleClassObject\"\n    class=\"data-column\"\n    [style.background-color]=\"column.getCellColor(_this, index)\"\n  >\n    <div *ngIf=\"!column.cellTemplate\">\n      {{ item[column.property] }}\n    </div>\n    <div\n      *ngIf=\"column.cellTemplate\"\n      [ngTemplateOutlet]=\"column.cellTemplate\"\n      [ngTemplateOutletContext]=\"{ column: column, row: _this, item: item }\"\n    ></div>\n  </td>\n</tr>\n<tr *ngIf=\"dataTable.expandableRows\" [hide]=\"!expanded\" class=\"row-expansion\">\n  <td [attr.colspan]=\"dataTable.columnCount\">\n    <div\n      [ngTemplateOutlet]=\"dataTable.expandTemplate\"\n      [ngTemplateOutletContext]=\"{ row: _this, item: item }\"\n    ></div>\n  </td>\n</tr>\n",
        styles: [".select-column{text-align:center}.row-expand-button{cursor:pointer;text-align:center}.clickable{cursor:pointer}"]
    }),
    tslib_1.__param(0, Inject(forwardRef(() => DataTable))),
    tslib_1.__metadata("design:paramtypes", [DataTable])
], DataTableRow);
export { DataTableRow };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpc21hdGpvbi9hbmd1bGFyLWRhdGEtdGFibGUvIiwic291cmNlcyI6WyJjb21wb25lbnRzL3Jvdy9yb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sVUFBVSxFQUNWLE1BQU0sRUFDTixZQUFZLEVBRWIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBT3JELElBQWEsWUFBWSxHQUF6QixNQUFhLFlBQVk7SUFhdkIsWUFDOEMsU0FBb0I7UUFBcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQVZsRSxVQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsNERBQTREO1FBT2hFLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUkzQyxDQUFDO0lBRUosSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLFFBQVEsQ0FBQyxRQUFRO1FBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQzFCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxTQUFTO0lBRVQsSUFBSSxZQUFZO1FBQ2QsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUM3RDthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUN2QjtJQUNILENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvRDtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDO0NBQ0YsQ0FBQTtBQTdDVTtJQUFSLEtBQUssRUFBRTs7MENBQVc7QUFDVjtJQUFSLEtBQUssRUFBRTs7MkNBQWU7QUFTYjtJQUFULE1BQU0sRUFBRTs7b0RBQXFDO0FBWG5DLFlBQVk7SUFMeEIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQiwwaEVBQW1DOztLQUVwQyxDQUFDO0lBZUcsbUJBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBOzZDQUFtQixTQUFTO0dBZHZELFlBQVksQ0E4Q3hCO1NBOUNZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBJbmplY3QsXG4gIGZvcndhcmRSZWYsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhVGFibGUgfSBmcm9tICcuLi90YWJsZS90YWJsZS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdbZGF0YVRhYmxlUm93XScsXG4gIHRlbXBsYXRlVXJsOiAnLi9yb3cuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9yb3cuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZVJvdyBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIGl0ZW06IGFueTtcbiAgQElucHV0KCkgaW5kZXg6IG51bWJlcjtcblxuICBfdGhpcyA9IHRoaXM7IC8vIEZJWE1FIGlzIHRoZXJlIG5vIHRlbXBsYXRlIGtleXdvcmQgZm9yIHRoaXMgaW4gYW5ndWxhciAyP1xuICBleHBhbmRlZDogYm9vbGVhbjtcblxuICAvLyByb3cgc2VsZWN0aW9uOlxuXG4gIHByaXZhdGUgX3NlbGVjdGVkOiBib29sZWFuO1xuXG4gIEBPdXRwdXQoKSBzZWxlY3RlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gRGF0YVRhYmxlKSkgcHVibGljIGRhdGFUYWJsZTogRGF0YVRhYmxlXG4gICkge31cblxuICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICB9XG5cbiAgc2V0IHNlbGVjdGVkKHNlbGVjdGVkKSB7XG4gICAgdGhpcy5fc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICB0aGlzLnNlbGVjdGVkQ2hhbmdlLmVtaXQoc2VsZWN0ZWQpO1xuICB9XG5cbiAgLy8gb3RoZXI6XG5cbiAgZ2V0IGRpc3BsYXlJbmRleCgpIHtcbiAgICBpZiAodGhpcy5kYXRhVGFibGUucGFnaW5hdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YVRhYmxlLmRpc3BsYXlQYXJhbXMub2Zmc2V0ICsgdGhpcy5pbmRleCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4ICsgMTtcbiAgICB9XG4gIH1cblxuICBnZXRUb29sdGlwKCkge1xuICAgIGlmICh0aGlzLmRhdGFUYWJsZS5yb3dUb29sdGlwKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhVGFibGUucm93VG9vbHRpcCh0aGlzLml0ZW0sIHRoaXMsIHRoaXMuaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gIH1cbn1cbiJdfQ==