import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ContentChildren, QueryList, TemplateRef, ContentChild, ViewChildren } from '@angular/core';
import { DataTableColumn } from '../column/column.component';
import { DataTableRow } from '../row/row.component';
import { defaultTranslations } from '../../types/default-translations.type';
import { drag } from '../../utils/drag';
let DataTable = class DataTable {
    constructor() {
        this._items = [];
        this.header = true;
        this.pagination = true;
        this.pagination_range = false;
        this.pagination_limit = false;
        this.pagination_input = false;
        this.pagination_numbers = true;
        this.indexColumn = true;
        this.indexColumnHeader = '';
        this.selectColumn = false;
        this.multiSelect = true;
        this.substituteRows = true;
        this.expandableRows = false;
        this.translations = defaultTranslations;
        this.selectOnRowClick = false;
        this.autoReload = true;
        this.showReloading = false;
        this._sortAsc = true;
        this._offset = 0;
        this._limit = 10;
        // event handlers:
        this.rowClick = new EventEmitter();
        this.rowDoubleClick = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.cellClick = new EventEmitter();
        // Reloading:
        this._reloading = false;
        this.reload = new EventEmitter();
        this._displayParams = {}; // params of the last finished reload
        this._scheduledReload = null;
        this.selectedRows = [];
        this._selectAllCheckbox = false;
        // column resizing:
        this._resizeInProgress = false;
        this.resizeLimit = 30;
    }
    get items() {
        return this._items;
    }
    set items(items) {
        this._items = items;
        this._onReloadFinished();
    }
    get sortBy() {
        return this._sortBy;
    }
    set sortBy(value) {
        this._sortBy = value;
        this._triggerReload();
    }
    get sortAsc() {
        return this._sortAsc;
    }
    set sortAsc(value) {
        this._sortAsc = value;
        this._triggerReload();
    }
    get offset() {
        return this._offset;
    }
    set offset(value) {
        this._offset = value;
        this._triggerReload();
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
        this._triggerReload();
    }
    // calculated property:
    get page() {
        return Math.floor(this.offset / this.limit) + 1;
    }
    set page(value) {
        this.offset = (value - 1) * this.limit;
    }
    get lastPage() {
        return Math.ceil(this.itemCount / this.limit);
    }
    // setting multiple observable properties simultaneously
    sort(sortBy, asc) {
        this.sortBy = sortBy;
        this.sortAsc = asc;
    }
    // init
    ngOnInit() {
        this._initDefaultValues();
        this._initDefaultClickEvents();
        this._updateDisplayParams();
        if (this.autoReload && this._scheduledReload == null) {
            this.reloadItems();
        }
    }
    _initDefaultValues() {
        this.indexColumnVisible = this.indexColumn;
        this.selectColumnVisible = this.selectColumn;
        this.expandColumnVisible = this.expandableRows;
    }
    _initDefaultClickEvents() {
        this.headerClick.subscribe(tableEvent => this.sortColumn(tableEvent.column));
        if (this.selectOnRowClick) {
            this.rowClick.subscribe(tableEvent => (tableEvent.row.selected = !tableEvent.row.selected));
        }
    }
    get reloading() {
        return this._reloading;
    }
    reloadItems() {
        this._reloading = true;
        this.reload.emit(this._getRemoteParameters());
    }
    _onReloadFinished() {
        this._updateDisplayParams();
        this._selectAllCheckbox = false;
        this._reloading = false;
    }
    get displayParams() {
        return this._displayParams;
    }
    _updateDisplayParams() {
        this._displayParams = {
            sortBy: this.sortBy,
            sortAsc: this.sortAsc,
            offset: this.offset,
            limit: this.limit
        };
    }
    // for avoiding cascading reloads if multiple params are set at once:
    _triggerReload() {
        if (this._scheduledReload) {
            clearTimeout(this._scheduledReload);
        }
        this._scheduledReload = setTimeout(() => {
            this.reloadItems();
        });
    }
    rowClicked(row, event) {
        this.rowClick.emit({ row, event });
    }
    rowDoubleClicked(row, event) {
        this.rowDoubleClick.emit({ row, event });
    }
    headerClicked(column, event) {
        if (!this._resizeInProgress) {
            event.preventDefault();
            event.stopPropagation();
            this.headerClick.emit({ column, event });
        }
        else {
            this._resizeInProgress = false; // this is because I can't prevent click from mousup of the drag end
        }
    }
    cellClicked(column, row, event) {
        this.cellClick.emit({ row, column, event });
    }
    // functions:
    _getRemoteParameters() {
        let params = {};
        if (this.sortBy) {
            params.sortBy = this.sortBy;
            params.sortAsc = this.sortAsc;
        }
        if (this.pagination) {
            params.offset = this.offset;
            params.limit = this.limit;
        }
        return params;
    }
    sortColumn(column) {
        if (column.sortable) {
            let ascending = this.sortBy === column.property ? !this.sortAsc : true;
            this.sort(column.property, ascending);
        }
    }
    get columnCount() {
        let count = 0;
        count += this.indexColumnVisible ? 1 : 0;
        count += this.selectColumnVisible ? 1 : 0;
        count += this.expandColumnVisible ? 1 : 0;
        this.columns.toArray().forEach(column => {
            count += column.visible ? 1 : 0;
        });
        return count;
    }
    getRowColor(item, index, row) {
        if (this.rowColors !== undefined) {
            return this.rowColors(item, row, index);
        }
    }
    get selectAllCheckbox() {
        return this._selectAllCheckbox;
    }
    set selectAllCheckbox(value) {
        this._selectAllCheckbox = value;
        this._onSelectAllChanged(value);
    }
    _onSelectAllChanged(value) {
        this.rows.toArray().forEach(row => (row.selected = value));
    }
    onRowSelectChanged(row) {
        // maintain the selectedRow(s) view
        if (this.multiSelect) {
            let index = this.selectedRows.indexOf(row);
            if (row.selected && index < 0) {
                this.selectedRows.push(row);
            }
            else if (!row.selected && index >= 0) {
                this.selectedRows.splice(index, 1);
            }
        }
        else {
            if (row.selected) {
                this.selectedRow = row;
            }
            else if (this.selectedRow === row) {
                this.selectedRow = undefined;
            }
        }
        // unselect all other rows:
        if (row.selected && !this.multiSelect) {
            this.rows
                .toArray()
                .filter(row_ => row_.selected)
                .forEach(row_ => {
                if (row_ !== row) {
                    // avoid endless loop
                    row_.selected = false;
                }
            });
        }
    }
    // other:
    get substituteItems() {
        return Array.from({ length: this.displayParams.limit - this.items.length });
    }
    resizeColumnStart(event, column, columnElement) {
        this._resizeInProgress = true;
        drag(event, {
            move: (moveEvent, dx) => {
                if (this._isResizeInLimit(columnElement, dx)) {
                    column.width = columnElement.offsetWidth + dx;
                }
            }
        });
    }
    _isResizeInLimit(columnElement, dx) {
        /* This is needed because CSS min-width didn't work on table-layout: fixed.
         Without the limits, resizing can make the next column disappear completely,
         and even increase the table width. The current implementation suffers from the fact,
         that offsetWidth sometimes contains out-of-date values. */
        if ((dx < 0 && columnElement.offsetWidth + dx <= this.resizeLimit) ||
            !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column
            (dx >= 0 &&
                columnElement.nextElementSibling.offsetWidth + dx <=
                    this.resizeLimit)) {
            return false;
        }
        return true;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], DataTable.prototype, "items", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], DataTable.prototype, "itemCount", void 0);
tslib_1.__decorate([
    ContentChildren(DataTableColumn),
    tslib_1.__metadata("design:type", QueryList)
], DataTable.prototype, "columns", void 0);
tslib_1.__decorate([
    ViewChildren(DataTableRow),
    tslib_1.__metadata("design:type", QueryList)
], DataTable.prototype, "rows", void 0);
tslib_1.__decorate([
    ContentChild('dataTableExpand'),
    tslib_1.__metadata("design:type", TemplateRef)
], DataTable.prototype, "expandTemplate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DataTable.prototype, "headerTitle", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "header", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "pagination", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "pagination_range", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "pagination_limit", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "pagination_input", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "pagination_numbers", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "indexColumn", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "indexColumnHeader", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function)
], DataTable.prototype, "rowColors", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Function)
], DataTable.prototype, "rowTooltip", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "selectColumn", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "multiSelect", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "substituteRows", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "expandableRows", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "translations", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "selectOnRowClick", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "autoReload", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "showReloading", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], DataTable.prototype, "noDataMessage", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "rowClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "rowDoubleClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "headerClick", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "cellClick", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DataTable.prototype, "sortBy", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DataTable.prototype, "sortAsc", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DataTable.prototype, "offset", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DataTable.prototype, "limit", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], DataTable.prototype, "page", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], DataTable.prototype, "reload", void 0);
DataTable = tslib_1.__decorate([
    Component({
        selector: 'data-table',
        template: "<div class=\"data-table-wrapper\">\n  <data-table-header *ngIf=\"header\"></data-table-header>\n\n  <div class=\"data-table-box\">\n    <table class=\"table table-condensed table-bordered data-table\">\n      <thead>\n        <tr>\n          <th\n            scope=\"col\"\n            [hide]=\"!expandColumnVisible\"\n            class=\"expand-column-header\"\n          ></th>\n          <th\n            scope=\"col\"\n            [hide]=\"!indexColumnVisible\"\n            class=\"index-column-header\"\n          >\n            <span>{{ indexColumnHeader }}</span>\n          </th>\n          <th\n            scope=\"col\"\n            [hide]=\"!selectColumnVisible\"\n            class=\"select-column-header\"\n          >\n            <input\n              [hide]=\"!multiSelect\"\n              type=\"checkbox\"\n              [(ngModel)]=\"selectAllCheckbox\"\n              [attr.aria-label]=\"translations.selectAllRows\"\n            />\n          </th>\n          <th\n            scope=\"col\"\n            *ngFor=\"let column of columns\"\n            #th\n            [hide]=\"!column.visible\"\n            (click)=\"headerClicked(column, $event)\"\n            (keyup.enter)=\"headerClicked(column, $event)\"\n            (keyup.space)=\"headerClicked(column, $event)\"\n            [class.sortable]=\"column.sortable\"\n            [class.resizable]=\"column.resizable\"\n            [ngClass]=\"column.styleClassObject\"\n            class=\"column-header\"\n            [style.width]=\"column.width | px\"\n            [attr.aria-sort]=\"\n              column.sortable\n                ? column.property === sortBy\n                  ? sortAsc\n                    ? 'ascending'\n                    : 'descending'\n                  : 'none'\n                : null\n            \"\n            [attr.tabindex]=\"column.sortable ? '0' : null\"\n          >\n            <span *ngIf=\"!column.headerTemplate\">\n              {{ column.header }}\n            </span>\n            <span\n              *ngIf=\"column.headerTemplate\"\n              [ngTemplateOutlet]=\"column.headerTemplate\"\n              [ngTemplateOutletContext]=\"{ column: column }\"\n            ></span>\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n              <span\n                class=\"fa fa-sort column-sortable-icon\"\n                [hide]=\"column.property === sortBy\"\n              ></span>\n              <span [hide]=\"column.property !== sortBy\">\n                <span\n                  class=\"fa\"\n                  [ngClass]=\"{\n                    'fa-caret-top': !sortAsc,\n                    'fa-caret-bottom': sortAsc\n                  }\"\n                ></span>\n              </span>\n            </span>\n            <span\n              *ngIf=\"column.resizable\"\n              class=\"column-resize-handle\"\n              (mousedown)=\"resizeColumnStart($event, column, th)\"\n            ></span>\n          </th>\n        </tr>\n      </thead>\n      <tbody\n        *ngFor=\"let item of items; let index = index\"\n        class=\"data-table-row-wrapper\"\n        dataTableRow\n        #row\n        [item]=\"item\"\n        [index]=\"index\"\n        (selectedChange)=\"onRowSelectChanged(row)\"\n      ></tbody>\n      <tbody *ngIf=\"itemCount === 0 && noDataMessage\">\n        <tr>\n          <td [attr.colspan]=\"columnCount\">{{ noDataMessage }}</td>\n        </tr>\n      </tbody>\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\n        <tr\n          *ngFor=\"let item of substituteItems; let index = index\"\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\n          [class.row-even]=\"(index + items.length) % 2 === 1\"\n        >\n          <td [hide]=\"!expandColumnVisible\"></td>\n          <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\n          <td [hide]=\"!selectColumnVisible\"></td>\n          <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\"></td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"loading-cover\" *ngIf=\"showReloading && reloading\"></div>\n  </div>\n\n  <data-table-pagination\n    *ngIf=\"pagination\"\n    [show_range]=\"pagination_range\"\n    [show_limit]=\"pagination_limit\"\n    [show_input]=\"pagination_input\"\n    [show_numbers]=\"pagination_numbers\"\n  ></data-table-pagination>\n</div>\n",
        styles: [":host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable{cursor:pointer}.column-header .column-sort-icon{float:right}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.loading-cover{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}"]
    })
], DataTable);
export { DataTable };
//# sourceMappingURL=data:application/json;base64,