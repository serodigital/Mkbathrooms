import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { DataTable } from './components/table/table.component';
import { DataTableColumn } from './components/column/column.component';
import { DataTableRow } from './components/row/row.component';
import { DataTablePagination } from './components/pagination/pagination.component';
import { DataTableHeader } from './components/header/header.component';
import { PixelConverter } from './utils/px';
import { Hide } from './utils/hide';
import { MinPipe } from './utils/min';
import { defaultTranslations } from './types/default-translations.type';
export * from './tools/data-table-resource';
export { DataTable, DataTableColumn, DataTableRow, DataTablePagination, DataTableHeader, defaultTranslations };
export const DATA_TABLE_DIRECTIVES = [DataTable, DataTableColumn];
let DataTableModule = class DataTableModule {
};
DataTableModule = tslib_1.__decorate([
    NgModule({
        imports: [CommonModule, FormsModule],
        declarations: [
            DataTable,
            DataTableColumn,
            DataTableRow,
            DataTablePagination,
            DataTableHeader,
            PixelConverter,
            Hide,
            MinPipe
        ],
        exports: [DataTable, DataTableColumn]
    })
], DataTableModule);
export { DataTableModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaXNtYXRqb24vYW5ndWxhci1kYXRhLXRhYmxlLyIsInNvdXJjZXMiOlsiaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDL0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNuRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFdkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM1QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFLdEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDeEUsY0FBYyw2QkFBNkIsQ0FBQztBQUM1QyxPQUFPLEVBQ0wsU0FBUyxFQUNULGVBQWUsRUFDZixZQUFZLEVBQ1osbUJBQW1CLEVBQ25CLGVBQWUsRUFLZixtQkFBbUIsRUFDcEIsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBZ0JsRSxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0NBQUcsQ0FBQTtBQUFsQixlQUFlO0lBZDNCLFFBQVEsQ0FBQztRQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7UUFDcEMsWUFBWSxFQUFFO1lBQ1osU0FBUztZQUNULGVBQWU7WUFDZixZQUFZO1lBQ1osbUJBQW1CO1lBQ25CLGVBQWU7WUFDZixjQUFjO1lBQ2QsSUFBSTtZQUNKLE9BQU87U0FDUjtRQUNELE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxlQUFlLENBQUM7S0FDdEMsQ0FBQztHQUNXLGVBQWUsQ0FBRztTQUFsQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgRGF0YVRhYmxlIH0gZnJvbSAnLi9jb21wb25lbnRzL3RhYmxlL3RhYmxlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhVGFibGVDb2x1bW4gfSBmcm9tICcuL2NvbXBvbmVudHMvY29sdW1uL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0YVRhYmxlUm93IH0gZnJvbSAnLi9jb21wb25lbnRzL3Jvdy9yb3cuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFUYWJsZVBhZ2luYXRpb24gfSBmcm9tICcuL2NvbXBvbmVudHMvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEYXRhVGFibGVIZWFkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBQaXhlbENvbnZlcnRlciB9IGZyb20gJy4vdXRpbHMvcHgnO1xuaW1wb3J0IHsgSGlkZSB9IGZyb20gJy4vdXRpbHMvaGlkZSc7XG5pbXBvcnQgeyBNaW5QaXBlIH0gZnJvbSAnLi91dGlscy9taW4nO1xuaW1wb3J0IHsgRGF0YVRhYmxlVHJhbnNsYXRpb25zIH0gZnJvbSAnLi90eXBlcy9kYXRhLXRhYmxlLXRyYW5zbGF0aW9ucy50eXBlJztcbmltcG9ydCB7IENlbGxDYWxsYmFjayB9IGZyb20gJy4vdHlwZXMvY2VsbC1jYWxsYmFjay50eXBlJztcbmltcG9ydCB7IFJvd0NhbGxiYWNrIH0gZnJvbSAnLi90eXBlcy9yb3ctY2FsbGJhY2sudHlwZSc7XG5pbXBvcnQgeyBEYXRhVGFibGVQYXJhbXMgfSBmcm9tICcuL3R5cGVzL2RhdGEtdGFibGUtcGFyYW1zLnR5cGUnO1xuaW1wb3J0IHsgZGVmYXVsdFRyYW5zbGF0aW9ucyB9IGZyb20gJy4vdHlwZXMvZGVmYXVsdC10cmFuc2xhdGlvbnMudHlwZSc7XG5leHBvcnQgKiBmcm9tICcuL3Rvb2xzL2RhdGEtdGFibGUtcmVzb3VyY2UnO1xuZXhwb3J0IHtcbiAgRGF0YVRhYmxlLFxuICBEYXRhVGFibGVDb2x1bW4sXG4gIERhdGFUYWJsZVJvdyxcbiAgRGF0YVRhYmxlUGFnaW5hdGlvbixcbiAgRGF0YVRhYmxlSGVhZGVyLFxuICBEYXRhVGFibGVUcmFuc2xhdGlvbnMsXG4gIENlbGxDYWxsYmFjayxcbiAgUm93Q2FsbGJhY2ssXG4gIERhdGFUYWJsZVBhcmFtcyxcbiAgZGVmYXVsdFRyYW5zbGF0aW9uc1xufTtcbmV4cG9ydCBjb25zdCBEQVRBX1RBQkxFX0RJUkVDVElWRVMgPSBbRGF0YVRhYmxlLCBEYXRhVGFibGVDb2x1bW5dO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBGb3Jtc01vZHVsZV0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIERhdGFUYWJsZSxcbiAgICBEYXRhVGFibGVDb2x1bW4sXG4gICAgRGF0YVRhYmxlUm93LFxuICAgIERhdGFUYWJsZVBhZ2luYXRpb24sXG4gICAgRGF0YVRhYmxlSGVhZGVyLFxuICAgIFBpeGVsQ29udmVydGVyLFxuICAgIEhpZGUsXG4gICAgTWluUGlwZVxuICBdLFxuICBleHBvcnRzOiBbRGF0YVRhYmxlLCBEYXRhVGFibGVDb2x1bW5dXG59KVxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZU1vZHVsZSB7fVxuIl19