(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ismatjon/angular-data-table', ['exports', '@angular/core', '@angular/common', '@angular/forms'], factory) :
    (global = global || self, factory((global.ismatjon = global.ismatjon || {}, global.ismatjon['angular-data-table'] = {}), global.ng.core, global.ng.common, global.ng.forms));
}(this, function (exports, core, common, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    var DataTableColumn = /** @class */ (function () {
        function DataTableColumn() {
            this.sortable = false;
            this.resizable = false;
            this.visible = true;
            this.styleClassObject = {}; // for [ngClass]
        }
        DataTableColumn.prototype.getCellColor = function (row, index) {
            if (this.cellColors !== undefined) {
                return this.cellColors(row.item, row, this, index);
            }
        };
        DataTableColumn.prototype.ngOnInit = function () {
            this._initCellClass();
        };
        DataTableColumn.prototype._initCellClass = function () {
            var _a;
            if (!this.styleClass && this.property) {
                if (/^[a-zA-Z0-9_]+$/.test(this.property)) {
                    this.styleClass = 'column-' + this.property;
                }
                else {
                    this.styleClass =
                        'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');
                }
            }
            if (this.styleClass != null) {
                this.styleClassObject = (_a = {},
                    _a[this.styleClass] = true,
                    _a);
            }
        };
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DataTableColumn.prototype, "header", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTableColumn.prototype, "sortable", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTableColumn.prototype, "resizable", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DataTableColumn.prototype, "property", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DataTableColumn.prototype, "styleClass", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], DataTableColumn.prototype, "cellColors", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTableColumn.prototype, "width", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTableColumn.prototype, "visible", void 0);
        __decorate([
            core.ContentChild('dataTableCell'),
            __metadata("design:type", Object)
        ], DataTableColumn.prototype, "cellTemplate", void 0);
        __decorate([
            core.ContentChild('dataTableHeader'),
            __metadata("design:type", Object)
        ], DataTableColumn.prototype, "headerTemplate", void 0);
        DataTableColumn = __decorate([
            core.Directive({
                selector: 'data-table-column'
            })
        ], DataTableColumn);
        return DataTableColumn;
    }());

    var DataTableRow = /** @class */ (function () {
        function DataTableRow(dataTable) {
            this.dataTable = dataTable;
            this._this = this; // FIXME is there no template keyword for this in angular 2?
            this.selectedChange = new core.EventEmitter();
        }
        Object.defineProperty(DataTableRow.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                this._selected = selected;
                this.selectedChange.emit(selected);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTableRow.prototype, "displayIndex", {
            // other:
            get: function () {
                if (this.dataTable.pagination) {
                    return this.dataTable.displayParams.offset + this.index + 1;
                }
                else {
                    return this.index + 1;
                }
            },
            enumerable: true,
            configurable: true
        });
        DataTableRow.prototype.getTooltip = function () {
            if (this.dataTable.rowTooltip) {
                return this.dataTable.rowTooltip(this.item, this, this.index);
            }
            return '';
        };
        DataTableRow.prototype.ngOnDestroy = function () {
            this.selected = false;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTableRow.prototype, "item", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], DataTableRow.prototype, "index", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DataTableRow.prototype, "selectedChange", void 0);
        DataTableRow = __decorate([
            core.Component({
                selector: '[dataTableRow]',
                template: "<tr\n  class=\"data-table-row\"\n  [title]=\"getTooltip()\"\n  [style.background-color]=\"dataTable.getRowColor(item, index, _this)\"\n  [class.row-odd]=\"index % 2 === 0\"\n  [class.row-even]=\"index % 2 === 1\"\n  [class.selected]=\"selected\"\n  [class.clickable]=\"dataTable.selectOnRowClick\"\n  (dblclick)=\"dataTable.rowDoubleClicked(_this, $event)\"\n  (click)=\"dataTable.rowClicked(_this, $event)\"\n>\n  <td [hide]=\"!dataTable.expandColumnVisible\">\n    <div\n      tabindex=\"0\"\n      role=\"button\"\n      (click)=\"expanded = !expanded; $event.stopPropagation()\"\n      class=\"row-expand-button\"\n      [attr.aria-expanded]=\"expanded\"\n      [title]=\"dataTable.translations.expandRow\"\n      [attr.aria-label]=\"dataTable.translations.expandRow\"\n    >\n      <span\n        class=\"fa\"\n        [ngClass]=\"{\n          'fa-caret-right': !expanded,\n          'fa-caret-bottom': expanded\n        }\"\n        aria-hidden=\"true\"\n      ></span>\n    </div>\n  </td>\n  <td [hide]=\"!dataTable.indexColumnVisible\" class=\"index-column\">\n    {{ displayIndex }}\n  </td>\n  <td [hide]=\"!dataTable.selectColumnVisible\" class=\"select-column\">\n    <input type=\"checkbox\" [(ngModel)]=\"selected\" />\n  </td>\n  <td\n    *ngFor=\"let column of dataTable.columns\"\n    [hide]=\"!column.visible\"\n    [ngClass]=\"column.styleClassObject\"\n    class=\"data-column\"\n    [style.background-color]=\"column.getCellColor(_this, index)\"\n  >\n    <div *ngIf=\"!column.cellTemplate\">\n      {{ item[column.property] }}\n    </div>\n    <div\n      *ngIf=\"column.cellTemplate\"\n      [ngTemplateOutlet]=\"column.cellTemplate\"\n      [ngTemplateOutletContext]=\"{ column: column, row: _this, item: item }\"\n    ></div>\n  </td>\n</tr>\n<tr *ngIf=\"dataTable.expandableRows\" [hide]=\"!expanded\" class=\"row-expansion\">\n  <td [attr.colspan]=\"dataTable.columnCount\">\n    <div\n      [ngTemplateOutlet]=\"dataTable.expandTemplate\"\n      [ngTemplateOutletContext]=\"{ row: _this, item: item }\"\n    ></div>\n  </td>\n</tr>\n",
                styles: [".select-column{text-align:center}.row-expand-button{cursor:pointer;text-align:center}.clickable{cursor:pointer}"]
            }),
            __param(0, core.Inject(core.forwardRef(function () { return DataTable; }))),
            __metadata("design:paramtypes", [DataTable])
        ], DataTableRow);
        return DataTableRow;
    }());

    var defaultTranslations = {
        headerReload: 'reload',
        headerColumnSelector: 'column selector',
        indexColumn: 'index',
        selectColumn: 'select',
        selectRow: 'select',
        selectAllRows: 'select',
        expandColumn: 'expand',
        expandRow: 'expand',
        paginationLimit: 'Limit',
        paginationRange: 'Results'
    };

    function drag(event, _a) {
        var move = _a.move, up = _a.up;
        var startX = event.pageX;
        var startY = event.pageY;
        var x = startX;
        var y = startY;
        var moved = false;
        function mouseMoveHandler(event) {
            var dx = event.pageX - x;
            var dy = event.pageY - y;
            x = event.pageX;
            y = event.pageY;
            if (dx || dy) {
                moved = true;
            }
            move(event, dx, dy, x, y);
            event.preventDefault(); // to avoid text selection
        }
        function mouseUpHandler(event) {
            x = event.pageX;
            y = event.pageY;
            document.removeEventListener('mousemove', mouseMoveHandler);
            document.removeEventListener('mouseup', mouseUpHandler);
            if (up) {
                up(event, x, y, moved);
            }
        }
        document.addEventListener('mousemove', mouseMoveHandler);
        document.addEventListener('mouseup', mouseUpHandler);
    }

    var DataTable = /** @class */ (function () {
        function DataTable() {
            this._items = [];
            this.header = true;
            this.pagination = true;
            this.pagination_range = false;
            this.pagination_limit = false;
            this.pagination_input = false;
            this.pagination_numbers = true;
            this.indexColumn = true;
            this.indexColumnHeader = '';
            this.selectColumn = false;
            this.multiSelect = true;
            this.substituteRows = true;
            this.expandableRows = false;
            this.translations = defaultTranslations;
            this.selectOnRowClick = false;
            this.autoReload = true;
            this.showReloading = false;
            this._sortAsc = true;
            this._offset = 0;
            this._limit = 10;
            // event handlers:
            this.rowClick = new core.EventEmitter();
            this.rowDoubleClick = new core.EventEmitter();
            this.headerClick = new core.EventEmitter();
            this.cellClick = new core.EventEmitter();
            // Reloading:
            this._reloading = false;
            this.reload = new core.EventEmitter();
            this._displayParams = {}; // params of the last finished reload
            this._scheduledReload = null;
            this.selectedRows = [];
            this._selectAllCheckbox = false;
            // column resizing:
            this._resizeInProgress = false;
            this.resizeLimit = 30;
        }
        Object.defineProperty(DataTable.prototype, "items", {
            get: function () {
                return this._items;
            },
            set: function (items) {
                this._items = items;
                this._onReloadFinished();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable.prototype, "sortBy", {
            get: function () {
                return this._sortBy;
            },
            set: function (value) {
                this._sortBy = value;
                this._triggerReload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable.prototype, "sortAsc", {
            get: function () {
                return this._sortAsc;
            },
            set: function (value) {
                this._sortAsc = value;
                this._triggerReload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable.prototype, "offset", {
            get: function () {
                return this._offset;
            },
            set: function (value) {
                this._offset = value;
                this._triggerReload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable.prototype, "limit", {
            get: function () {
                return this._limit;
            },
            set: function (value) {
                this._limit = value;
                this._triggerReload();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable.prototype, "page", {
            // calculated property:
            get: function () {
                return Math.floor(this.offset / this.limit) + 1;
            },
            set: function (value) {
                this.offset = (value - 1) * this.limit;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTable.prototype, "lastPage", {
            get: function () {
                return Math.ceil(this.itemCount / this.limit);
            },
            enumerable: true,
            configurable: true
        });
        // setting multiple observable properties simultaneously
        DataTable.prototype.sort = function (sortBy, asc) {
            this.sortBy = sortBy;
            this.sortAsc = asc;
        };
        // init
        DataTable.prototype.ngOnInit = function () {
            this._initDefaultValues();
            this._initDefaultClickEvents();
            this._updateDisplayParams();
            if (this.autoReload && this._scheduledReload == null) {
                this.reloadItems();
            }
        };
        DataTable.prototype._initDefaultValues = function () {
            this.indexColumnVisible = this.indexColumn;
            this.selectColumnVisible = this.selectColumn;
            this.expandColumnVisible = this.expandableRows;
        };
        DataTable.prototype._initDefaultClickEvents = function () {
            var _this = this;
            this.headerClick.subscribe(function (tableEvent) {
                return _this.sortColumn(tableEvent.column);
            });
            if (this.selectOnRowClick) {
                this.rowClick.subscribe(function (tableEvent) { return (tableEvent.row.selected = !tableEvent.row.selected); });
            }
        };
        Object.defineProperty(DataTable.prototype, "reloading", {
            get: function () {
                return this._reloading;
            },
            enumerable: true,
            configurable: true
        });
        DataTable.prototype.reloadItems = function () {
            this._reloading = true;
            this.reload.emit(this._getRemoteParameters());
        };
        DataTable.prototype._onReloadFinished = function () {
            this._updateDisplayParams();
            this._selectAllCheckbox = false;
            this._reloading = false;
        };
        Object.defineProperty(DataTable.prototype, "displayParams", {
            get: function () {
                return this._displayParams;
            },
            enumerable: true,
            configurable: true
        });
        DataTable.prototype._updateDisplayParams = function () {
            this._displayParams = {
                sortBy: this.sortBy,
                sortAsc: this.sortAsc,
                offset: this.offset,
                limit: this.limit
            };
        };
        // for avoiding cascading reloads if multiple params are set at once:
        DataTable.prototype._triggerReload = function () {
            var _this = this;
            if (this._scheduledReload) {
                clearTimeout(this._scheduledReload);
            }
            this._scheduledReload = setTimeout(function () {
                _this.reloadItems();
            });
        };
        DataTable.prototype.rowClicked = function (row, event) {
            this.rowClick.emit({ row: row, event: event });
        };
        DataTable.prototype.rowDoubleClicked = function (row, event) {
            this.rowDoubleClick.emit({ row: row, event: event });
        };
        DataTable.prototype.headerClicked = function (column, event) {
            if (!this._resizeInProgress) {
                event.preventDefault();
                event.stopPropagation();
                this.headerClick.emit({ column: column, event: event });
            }
            else {
                this._resizeInProgress = false; // this is because I can't prevent click from mousup of the drag end
            }
        };
        DataTable.prototype.cellClicked = function (column, row, event) {
            this.cellClick.emit({ row: row, column: column, event: event });
        };
        // functions:
        DataTable.prototype._getRemoteParameters = function () {
            var params = {};
            if (this.sortBy) {
                params.sortBy = this.sortBy;
                params.sortAsc = this.sortAsc;
            }
            if (this.pagination) {
                params.offset = this.offset;
                params.limit = this.limit;
            }
            return params;
        };
        DataTable.prototype.sortColumn = function (column) {
            if (column.sortable) {
                var ascending = this.sortBy === column.property ? !this.sortAsc : true;
                this.sort(column.property, ascending);
            }
        };
        Object.defineProperty(DataTable.prototype, "columnCount", {
            get: function () {
                var count = 0;
                count += this.indexColumnVisible ? 1 : 0;
                count += this.selectColumnVisible ? 1 : 0;
                count += this.expandColumnVisible ? 1 : 0;
                this.columns.toArray().forEach(function (column) {
                    count += column.visible ? 1 : 0;
                });
                return count;
            },
            enumerable: true,
            configurable: true
        });
        DataTable.prototype.getRowColor = function (item, index, row) {
            if (this.rowColors !== undefined) {
                return this.rowColors(item, row, index);
            }
        };
        Object.defineProperty(DataTable.prototype, "selectAllCheckbox", {
            get: function () {
                return this._selectAllCheckbox;
            },
            set: function (value) {
                this._selectAllCheckbox = value;
                this._onSelectAllChanged(value);
            },
            enumerable: true,
            configurable: true
        });
        DataTable.prototype._onSelectAllChanged = function (value) {
            this.rows.toArray().forEach(function (row) { return (row.selected = value); });
        };
        DataTable.prototype.onRowSelectChanged = function (row) {
            // maintain the selectedRow(s) view
            if (this.multiSelect) {
                var index = this.selectedRows.indexOf(row);
                if (row.selected && index < 0) {
                    this.selectedRows.push(row);
                }
                else if (!row.selected && index >= 0) {
                    this.selectedRows.splice(index, 1);
                }
            }
            else {
                if (row.selected) {
                    this.selectedRow = row;
                }
                else if (this.selectedRow === row) {
                    this.selectedRow = undefined;
                }
            }
            // unselect all other rows:
            if (row.selected && !this.multiSelect) {
                this.rows
                    .toArray()
                    .filter(function (row_) { return row_.selected; })
                    .forEach(function (row_) {
                    if (row_ !== row) {
                        // avoid endless loop
                        row_.selected = false;
                    }
                });
            }
        };
        Object.defineProperty(DataTable.prototype, "substituteItems", {
            // other:
            get: function () {
                return Array.from({ length: this.displayParams.limit - this.items.length });
            },
            enumerable: true,
            configurable: true
        });
        DataTable.prototype.resizeColumnStart = function (event, column, columnElement) {
            var _this = this;
            this._resizeInProgress = true;
            drag(event, {
                move: function (moveEvent, dx) {
                    if (_this._isResizeInLimit(columnElement, dx)) {
                        column.width = columnElement.offsetWidth + dx;
                    }
                }
            });
        };
        DataTable.prototype._isResizeInLimit = function (columnElement, dx) {
            /* This is needed because CSS min-width didn't work on table-layout: fixed.
             Without the limits, resizing can make the next column disappear completely,
             and even increase the table width. The current implementation suffers from the fact,
             that offsetWidth sometimes contains out-of-date values. */
            if ((dx < 0 && columnElement.offsetWidth + dx <= this.resizeLimit) ||
                !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column
                (dx >= 0 &&
                    columnElement.nextElementSibling.offsetWidth + dx <=
                        this.resizeLimit)) {
                return false;
            }
            return true;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Array),
            __metadata("design:paramtypes", [Array])
        ], DataTable.prototype, "items", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Number)
        ], DataTable.prototype, "itemCount", void 0);
        __decorate([
            core.ContentChildren(DataTableColumn),
            __metadata("design:type", core.QueryList)
        ], DataTable.prototype, "columns", void 0);
        __decorate([
            core.ViewChildren(DataTableRow),
            __metadata("design:type", core.QueryList)
        ], DataTable.prototype, "rows", void 0);
        __decorate([
            core.ContentChild('dataTableExpand'),
            __metadata("design:type", core.TemplateRef)
        ], DataTable.prototype, "expandTemplate", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DataTable.prototype, "headerTitle", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "header", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "pagination", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "pagination_range", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "pagination_limit", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "pagination_input", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "pagination_numbers", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "indexColumn", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "indexColumnHeader", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], DataTable.prototype, "rowColors", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Function)
        ], DataTable.prototype, "rowTooltip", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "selectColumn", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "multiSelect", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "substituteRows", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "expandableRows", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "translations", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "selectOnRowClick", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "autoReload", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "showReloading", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String)
        ], DataTable.prototype, "noDataMessage", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "rowClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "rowDoubleClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "headerClick", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "cellClick", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DataTable.prototype, "sortBy", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DataTable.prototype, "sortAsc", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DataTable.prototype, "offset", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DataTable.prototype, "limit", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], DataTable.prototype, "page", null);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], DataTable.prototype, "reload", void 0);
        DataTable = __decorate([
            core.Component({
                selector: 'data-table',
                template: "<div class=\"data-table-wrapper\">\n  <data-table-header *ngIf=\"header\"></data-table-header>\n\n  <div class=\"data-table-box\">\n    <table class=\"table table-condensed table-bordered data-table\">\n      <thead>\n        <tr>\n          <th\n            scope=\"col\"\n            [hide]=\"!expandColumnVisible\"\n            class=\"expand-column-header\"\n          ></th>\n          <th\n            scope=\"col\"\n            [hide]=\"!indexColumnVisible\"\n            class=\"index-column-header\"\n          >\n            <span>{{ indexColumnHeader }}</span>\n          </th>\n          <th\n            scope=\"col\"\n            [hide]=\"!selectColumnVisible\"\n            class=\"select-column-header\"\n          >\n            <input\n              [hide]=\"!multiSelect\"\n              type=\"checkbox\"\n              [(ngModel)]=\"selectAllCheckbox\"\n              [attr.aria-label]=\"translations.selectAllRows\"\n            />\n          </th>\n          <th\n            scope=\"col\"\n            *ngFor=\"let column of columns\"\n            #th\n            [hide]=\"!column.visible\"\n            (click)=\"headerClicked(column, $event)\"\n            (keyup.enter)=\"headerClicked(column, $event)\"\n            (keyup.space)=\"headerClicked(column, $event)\"\n            [class.sortable]=\"column.sortable\"\n            [class.resizable]=\"column.resizable\"\n            [ngClass]=\"column.styleClassObject\"\n            class=\"column-header\"\n            [style.width]=\"column.width | px\"\n            [attr.aria-sort]=\"\n              column.sortable\n                ? column.property === sortBy\n                  ? sortAsc\n                    ? 'ascending'\n                    : 'descending'\n                  : 'none'\n                : null\n            \"\n            [attr.tabindex]=\"column.sortable ? '0' : null\"\n          >\n            <span *ngIf=\"!column.headerTemplate\">\n              {{ column.header }}\n            </span>\n            <span\n              *ngIf=\"column.headerTemplate\"\n              [ngTemplateOutlet]=\"column.headerTemplate\"\n              [ngTemplateOutletContext]=\"{ column: column }\"\n            ></span>\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n              <span\n                class=\"fa fa-sort column-sortable-icon\"\n                [hide]=\"column.property === sortBy\"\n              ></span>\n              <span [hide]=\"column.property !== sortBy\">\n                <span\n                  class=\"fa\"\n                  [ngClass]=\"{\n                    'fa-caret-top': !sortAsc,\n                    'fa-caret-bottom': sortAsc\n                  }\"\n                ></span>\n              </span>\n            </span>\n            <span\n              *ngIf=\"column.resizable\"\n              class=\"column-resize-handle\"\n              (mousedown)=\"resizeColumnStart($event, column, th)\"\n            ></span>\n          </th>\n        </tr>\n      </thead>\n      <tbody\n        *ngFor=\"let item of items; let index = index\"\n        class=\"data-table-row-wrapper\"\n        dataTableRow\n        #row\n        [item]=\"item\"\n        [index]=\"index\"\n        (selectedChange)=\"onRowSelectChanged(row)\"\n      ></tbody>\n      <tbody *ngIf=\"itemCount === 0 && noDataMessage\">\n        <tr>\n          <td [attr.colspan]=\"columnCount\">{{ noDataMessage }}</td>\n        </tr>\n      </tbody>\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\n        <tr\n          *ngFor=\"let item of substituteItems; let index = index\"\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\n          [class.row-even]=\"(index + items.length) % 2 === 1\"\n        >\n          <td [hide]=\"!expandColumnVisible\"></td>\n          <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\n          <td [hide]=\"!selectColumnVisible\"></td>\n          <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\"></td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"loading-cover\" *ngIf=\"showReloading && reloading\"></div>\n  </div>\n\n  <data-table-pagination\n    *ngIf=\"pagination\"\n    [show_range]=\"pagination_range\"\n    [show_limit]=\"pagination_limit\"\n    [show_input]=\"pagination_input\"\n    [show_numbers]=\"pagination_numbers\"\n  ></data-table-pagination>\n</div>\n",
                styles: [":host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable{cursor:pointer}.column-header .column-sort-icon{float:right}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.loading-cover{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}"]
            })
        ], DataTable);
        return DataTable;
    }());

    var DataTablePagination = /** @class */ (function () {
        function DataTablePagination(dataTable) {
            this.dataTable = dataTable;
            this.show_range = false;
            this.show_limit = false;
            this.show_input = false;
            this.show_numbers = true;
        }
        DataTablePagination.prototype.pageBack = function () {
            this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);
        };
        DataTablePagination.prototype.pageForward = function () {
            this.dataTable.offset += this.dataTable.limit;
        };
        DataTablePagination.prototype.pageFirst = function () {
            this.dataTable.offset = 0;
        };
        DataTablePagination.prototype.pageLast = function () {
            this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;
        };
        Object.defineProperty(DataTablePagination.prototype, "maxPage", {
            get: function () {
                return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTablePagination.prototype, "limit", {
            get: function () {
                return this.dataTable.limit;
            },
            set: function (value) {
                this.dataTable.limit = Number(value); // TODO better way to handle that value of number <input> is string?
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataTablePagination.prototype, "page", {
            get: function () {
                return this.dataTable.page;
            },
            set: function (value) {
                this.dataTable.page = Number(value);
            },
            enumerable: true,
            configurable: true
        });
        DataTablePagination.prototype.createPageRange = function (number, page) {
            var displayedPage = 3;
            var items = [];
            if (number > 1) {
                var maxPage = number;
                var minPage = 1;
                if (page === 1 && maxPage >= displayedPage) {
                    maxPage = 3;
                }
                else if (page > 1 && maxPage > page + 1) {
                    minPage = page - 1;
                    maxPage = page + 1;
                }
                else if (page > 2 && maxPage > page) {
                    minPage = page - 1;
                    maxPage = page + 1;
                }
                else if (page > 2 && maxPage === page) {
                    minPage = page - 2;
                    maxPage = page;
                }
                for (var i = minPage; i <= maxPage; i++) {
                    items.push(i);
                }
            }
            return items;
        };
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTablePagination.prototype, "show_range", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTablePagination.prototype, "show_limit", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTablePagination.prototype, "show_input", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Object)
        ], DataTablePagination.prototype, "show_numbers", void 0);
        DataTablePagination = __decorate([
            core.Component({
                selector: 'data-table-pagination',
                template: "<div class=\"pagination-box d-flex justify-content-between\">\n  <div class=\"pagination-range\" *ngIf=\"show_range\">\n    {{ dataTable.translations.paginationRange }}:\n    <span>{{ dataTable.offset + 1 }}</span>\n    -\n    <span>\n      {{ [dataTable.offset + dataTable.limit, dataTable.itemCount] | min }}\n    </span>\n    /\n    <span>{{ dataTable.itemCount }}</span>\n  </div>\n  <div class=\"pagination-controllers d-flex\">\n    <div class=\"pagination-limit\" *ngIf=\"show_limit\">\n      <div class=\"input-group\">\n        <span class=\"input-group-prepend\">\n          <span class=\"input-group-text\">\n            {{ dataTable.translations.paginationLimit }}:\n          </span>\n        </span>\n        <input\n          #limitInput\n          type=\"number\"\n          class=\"form-control\"\n          min=\"1\"\n          step=\"1\"\n          [ngModel]=\"limit\"\n          (blur)=\"limit = limitInput.value\"\n          (keyup.enter)=\"limit = limitInput.value\"\n          (keyup.esc)=\"limitInput.value = limit\"\n        />\n      </div>\n    </div>\n    <div class=\"pagination-pages d-flex\" *ngIf=\"maxPage > 1\">\n      <button\n        [disabled]=\"dataTable.offset <= 0\"\n        (click)=\"pageFirst()\"\n        class=\"btn btn-secondary pagination-firstpage\"\n      >\n        &laquo;\n      </button>\n      <button\n        [disabled]=\"dataTable.offset <= 0\"\n        (click)=\"pageBack()\"\n        class=\"btn btn-secondary pagination-prevpage mx-1\"\n      >\n        &lsaquo;\n      </button>\n      <div class=\"pagination-page\" *ngIf=\"show_input\">\n        <div class=\"input-group\">\n          <input\n            #pageInput\n            type=\"number\"\n            class=\"form-control\"\n            min=\"1\"\n            step=\"1\"\n            max=\"{{ maxPage }}\"\n            [ngModel]=\"page\"\n            (blur)=\"page = pageInput.value\"\n            (keyup.enter)=\"page = pageInput.value\"\n            (keyup.esc)=\"pageInput.value = page\"\n          />\n          <div class=\"input-group-prepend\">\n            <span class=\"input-group-text\">\n              <span>/</span>\n              <span>{{ dataTable.lastPage }}</span>\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"pagination-page\" *ngIf=\"show_numbers\">\n        <button\n          *ngFor=\"let i of createPageRange(maxPage, page)\"\n          [disabled]=\"i == page\"\n          (click)=\"page = i\"\n          class=\"btn btn-default\"\n        >\n          {{ i }}\n        </button>\n      </div>\n      <button\n        [disabled]=\"dataTable.offset + dataTable.limit >= dataTable.itemCount\"\n        (click)=\"pageForward()\"\n        class=\"btn btn-secondary pagination-nextpage mx-1\"\n      >\n        &rsaquo;\n      </button>\n      <button\n        [disabled]=\"dataTable.offset + dataTable.limit >= dataTable.itemCount\"\n        (click)=\"pageLast()\"\n        class=\"btn btn-secondary pagination-lastpage\"\n      >\n        &raquo;\n      </button>\n    </div>\n  </div>\n</div>\n",
                styles: [".pagination-box{position:relative;margin-top:-10px}.pagination-range{display:flex;align-items:center;margin-left:3px}.pagination-range span{margin:0 4px}.pagination-range span:last-child{margin-right:0;margin-left:4px}.pagination-controllers input{min-width:60px;text-align:right}.pagination-limit{margin-right:25px;min-width:150px;max-width:200px}.pagination-page{width:110px}.pagination-reload{color:gray;font-size:12px}"]
            }),
            __param(0, core.Inject(core.forwardRef(function () { return DataTable; }))),
            __metadata("design:paramtypes", [DataTable])
        ], DataTablePagination);
        return DataTablePagination;
    }());

    var DataTableHeader = /** @class */ (function () {
        function DataTableHeader(dataTable) {
            this.dataTable = dataTable;
            this.columnSelectorOpen = false;
        }
        DataTableHeader.prototype._closeSelector = function () {
            this.columnSelectorOpen = false;
        };
        DataTableHeader = __decorate([
            core.Component({
                selector: 'data-table-header',
                template: "<div class=\"data-table-header d-flex justify-content-between\">\n  <h4 class=\"title\">{{ dataTable.headerTitle }}</h4>\n  <div class=\"button-panel\">\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary btn-sm refresh-button mr-1\"\n      (click)=\"dataTable.reloadItems()\"\n      [attr.aria-label]=\"dataTable.translations.headerReload\"\n      [title]=\"dataTable.translations.headerReload\"\n    >\n      <span class=\"fa fa-refresh\"></span>\n    </button>\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary btn-sm column-selector-button\"\n      [class.active]=\"columnSelectorOpen\"\n      (click)=\"\n        columnSelectorOpen = !columnSelectorOpen; $event.stopPropagation()\n      \"\n      [attr.aria-label]=\"dataTable.translations.headerColumnSelector\"\n      [title]=\"dataTable.translations.headerColumnSelector\"\n    >\n      <span class=\"fa fa-list\"></span>\n    </button>\n    <div class=\"column-selector-wrapper\" (click)=\"$event.stopPropagation()\">\n      <div *ngIf=\"columnSelectorOpen\" class=\"column-selector-box card\">\n        <div\n          *ngIf=\"dataTable.expandableRows\"\n          class=\"column-selector-fixed-column form-check\"\n        >\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            [(ngModel)]=\"dataTable.expandColumnVisible\"\n            id=\"check1\"\n          />\n          <label class=\"form-check-label\" for=\"check1\">\n            {{ dataTable.translations.expandColumn }}\n          </label>\n        </div>\n\n        <div\n          *ngIf=\"dataTable.indexColumn\"\n          class=\"column-selector-fixed-column form-check\"\n        >\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            [(ngModel)]=\"dataTable.indexColumnVisible\"\n            id=\"check2\"\n          />\n          <label class=\"form-check-label\" for=\"check2\">\n            {{ dataTable.translations.indexColumn }}\n          </label>\n        </div>\n\n        <div\n          *ngIf=\"dataTable.selectColumn\"\n          class=\"column-selector-fixed-column form-check\"\n        >\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            [(ngModel)]=\"dataTable.selectColumnVisible\"\n            id=\"check3\"\n          />\n          <label class=\"form-check-label\" for=\"check3\">\n            {{ dataTable.translations.selectColumn }}\n          </label>\n        </div>\n\n        <div\n          *ngFor=\"let column of dataTable.columns; index as i\"\n          class=\"column-selector-column form-check\"\n        >\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            [(ngModel)]=\"column.visible\"\n            [id]=\"'col-check' + i\"\n          />\n          <label class=\"form-check-label\" [for]=\"'col-check' + i\">\n            {{ column.header }}\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                host: {
                    '(document:click)': '_closeSelector()'
                },
                styles: [".data-table-header{min-height:25px;margin-bottom:10px}.title{margin:5px 0 0 5px}.column-selector-wrapper{position:relative}.column-selector-box{box-shadow:0 0 10px #d3d3d3;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-fixed-column{font-style:italic}"]
            }),
            __param(0, core.Inject(core.forwardRef(function () { return DataTable; }))),
            __metadata("design:paramtypes", [DataTable])
        ], DataTableHeader);
        return DataTableHeader;
    }());

    var PixelConverter = /** @class */ (function () {
        function PixelConverter() {
        }
        PixelConverter.prototype.transform = function (value, args) {
            if (value === undefined) {
                return;
            }
            if (typeof value === 'string') {
                return value;
            }
            if (typeof value === 'number') {
                return value + 'px';
            }
        };
        PixelConverter = __decorate([
            core.Pipe({
                name: 'px'
            })
        ], PixelConverter);
        return PixelConverter;
    }());

    function isBlank(obj) {
        return obj === undefined || obj === null;
    }
    var Hide = /** @class */ (function () {
        function Hide(_elementRef, _renderer) {
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this._prevCondition = null;
        }
        Object.defineProperty(Hide.prototype, "hide", {
            set: function (newCondition) {
                this.initDisplayStyle();
                if (newCondition &&
                    (isBlank(this._prevCondition) || !this._prevCondition)) {
                    this._prevCondition = true;
                    this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', 'none');
                }
                else if (!newCondition &&
                    (isBlank(this._prevCondition) || this._prevCondition)) {
                    this._prevCondition = false;
                    this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', this._displayStyle);
                }
            },
            enumerable: true,
            configurable: true
        });
        Hide.prototype.initDisplayStyle = function () {
            if (this._displayStyle === undefined) {
                var displayStyle = this._elementRef.nativeElement.style.display;
                if (displayStyle && displayStyle !== 'none') {
                    this._displayStyle = displayStyle;
                }
            }
        };
        Hide = __decorate([
            core.Directive({ selector: '[hide]', inputs: ['hide'] }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer])
        ], Hide);
        return Hide;
    }());

    var MinPipe = /** @class */ (function () {
        function MinPipe() {
        }
        MinPipe.prototype.transform = function (value, args) {
            return Math.min.apply(null, value);
        };
        MinPipe = __decorate([
            core.Pipe({
                name: 'min'
            })
        ], MinPipe);
        return MinPipe;
    }());

    var DataTableResource = /** @class */ (function () {
        function DataTableResource(items) {
            this.items = items;
        }
        DataTableResource.prototype.query = function (params, filter) {
            var result = [];
            if (filter) {
                result = this.items.filter(filter);
            }
            else {
                result = this.items.slice(); // shallow copy to use for sorting instead of changing the original
            }
            if (params.sortBy) {
                result.sort(function (a, b) {
                    if (typeof a[params.sortBy] === 'string') {
                        return a[params.sortBy].localeCompare(b[params.sortBy]);
                    }
                    else {
                        return a[params.sortBy] - b[params.sortBy];
                    }
                });
                if (params.sortAsc === false) {
                    result.reverse();
                }
            }
            if (params.offset !== undefined) {
                if (params.limit === undefined) {
                    result = result.slice(params.offset, result.length);
                }
                else {
                    result = result.slice(params.offset, params.offset + params.limit);
                }
            }
            return new Promise(function (resolve, reject) {
                setTimeout(function () { return resolve(result); });
            });
        };
        DataTableResource.prototype.count = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                setTimeout(function () { return resolve(_this.items.length); });
            });
        };
        return DataTableResource;
    }());

    var DATA_TABLE_DIRECTIVES = [DataTable, DataTableColumn];
    var DataTableModule = /** @class */ (function () {
        function DataTableModule() {
        }
        DataTableModule = __decorate([
            core.NgModule({
                imports: [common.CommonModule, forms.FormsModule],
                declarations: [
                    DataTable,
                    DataTableColumn,
                    DataTableRow,
                    DataTablePagination,
                    DataTableHeader,
                    PixelConverter,
                    Hide,
                    MinPipe
                ],
                exports: [DataTable, DataTableColumn]
            })
        ], DataTableModule);
        return DataTableModule;
    }());

    exports.DATA_TABLE_DIRECTIVES = DATA_TABLE_DIRECTIVES;
    exports.DataTable = DataTable;
    exports.DataTableColumn = DataTableColumn;
    exports.DataTableHeader = DataTableHeader;
    exports.DataTableModule = DataTableModule;
    exports.DataTablePagination = DataTablePagination;
    exports.DataTableResource = DataTableResource;
    exports.DataTableRow = DataTableRow;
    exports.defaultTranslations = defaultTranslations;
    exports.ɵa = PixelConverter;
    exports.ɵb = Hide;
    exports.ɵc = MinPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ismatjon-angular-data-table.umd.js.map
