import { __decorate, __metadata, __param } from 'tslib';
import { Input, ContentChild, Directive, EventEmitter, Output, Component, Inject, forwardRef, ContentChildren, QueryList, ViewChildren, TemplateRef, Pipe, ElementRef, Renderer, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';

const _c0 = ["dataTableCell"];
const _c1 = ["dataTableHeader"];
const _c2 = ["dataTableRow", ""];
function DataTableRow_td_8_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.item[column_r2.property], " ");
} }
const _c3 = function (a0, a1, a2) { return { column: a0, row: a1, item: a2 }; };
function DataTableRow_td_8_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 12);
} if (rf & 2) {
    const column_r2 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", column_r2.cellTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(2, _c3, column_r2, ctx_r4._this, ctx_r4.item));
} }
function DataTableRow_td_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "td", 9);
    ɵngcc0.ɵɵtemplate(1, DataTableRow_td_8_div_1_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵtemplate(2, DataTableRow_td_8_div_2_Template, 1, 6, "div", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r2 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("background-color", column_r2.getCellColor(ctx_r0._this, ctx_r0.index));
    ɵngcc0.ɵɵproperty("hide", !column_r2.visible)("ngClass", column_r2.styleClassObject);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !column_r2.cellTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r2.cellTemplate);
} }
const _c4 = function (a0, a1) { return { row: a0, item: a1 }; };
function DataTableRow_tr_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr", 13);
    ɵngcc0.ɵɵelementStart(1, "td");
    ɵngcc0.ɵɵelement(2, "div", 12);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("hide", !ctx_r1.expanded);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("colspan", ctx_r1.dataTable.columnCount);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.dataTable.expandTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(4, _c4, ctx_r1._this, ctx_r1.item));
} }
const _c5 = function (a0, a1) { return { "fa-caret-right": a0, "fa-caret-bottom": a1 }; };
const _c6 = ["dataTableExpand"];
function DataTable_data_table_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "data-table-header");
} }
function DataTable_th_12_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", column_r7.header, " ");
} }
const _c7 = function (a0) { return { column: a0 }; };
function DataTable_th_12_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 18);
} if (rf & 2) {
    const column_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", column_r7.headerTemplate)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c7, column_r7));
} }
const _c8 = function (a0, a1) { return { "fa-caret-top": a0, "fa-caret-bottom": a1 }; };
function DataTable_th_12_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵelement(1, "span", 20);
    ɵngcc0.ɵɵelementStart(2, "span", 21);
    ɵngcc0.ɵɵelement(3, "span", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r7 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("hide", column_r7.property === ctx_r11.sortBy);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("hide", column_r7.property !== ctx_r11.sortBy);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(3, _c8, !ctx_r11.sortAsc, ctx_r11.sortAsc));
} }
function DataTable_th_12_span_6_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 23);
    ɵngcc0.ɵɵlistener("mousedown", function DataTable_th_12_span_6_Template_span_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r17); const column_r7 = ɵngcc0.ɵɵnextContext().$implicit; const _r8 = ɵngcc0.ɵɵreference(1); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.resizeColumnStart($event, column_r7, _r8); });
    ɵngcc0.ɵɵelementEnd();
} }
function DataTable_th_12_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "th", 13, 14);
    ɵngcc0.ɵɵlistener("click", function DataTable_th_12_Template_th_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const column_r7 = ctx.$implicit; const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.headerClicked(column_r7, $event); })("keyup.enter", function DataTable_th_12_Template_th_keyup_enter_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const column_r7 = ctx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.headerClicked(column_r7, $event); })("keyup.space", function DataTable_th_12_Template_th_keyup_space_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const column_r7 = ctx.$implicit; const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.headerClicked(column_r7, $event); });
    ɵngcc0.ɵɵpipe(2, "px");
    ɵngcc0.ɵɵtemplate(3, DataTable_th_12_span_3_Template, 2, 1, "span", 1);
    ɵngcc0.ɵɵtemplate(4, DataTable_th_12_span_4_Template, 1, 4, "span", 15);
    ɵngcc0.ɵɵtemplate(5, DataTable_th_12_span_5_Template, 4, 6, "span", 16);
    ɵngcc0.ɵɵtemplate(6, DataTable_th_12_span_6_Template, 1, 0, "span", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r7 = ctx.$implicit;
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("width", ɵngcc0.ɵɵpipeBind1(2, 14, column_r7.width));
    ɵngcc0.ɵɵclassProp("sortable", column_r7.sortable)("resizable", column_r7.resizable);
    ɵngcc0.ɵɵproperty("hide", !column_r7.visible)("ngClass", column_r7.styleClassObject);
    ɵngcc0.ɵɵattribute("aria-sort", column_r7.sortable ? column_r7.property === ctx_r1.sortBy ? ctx_r1.sortAsc ? "ascending" : "descending" : "none" : null)("tabindex", column_r7.sortable ? "0" : null);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !column_r7.headerTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r7.headerTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r7.sortable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", column_r7.resizable);
} }
function DataTable_tbody_13_Template(rf, ctx) { if (rf & 1) {
    const _r27 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "tbody", 24, 25);
    ɵngcc0.ɵɵlistener("selectedChange", function DataTable_tbody_13_Template_tbody_selectedChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r27); const _r25 = ɵngcc0.ɵɵreference(1); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.onRowSelectChanged(_r25); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r23 = ctx.$implicit;
    const index_r24 = ctx.index;
    ɵngcc0.ɵɵproperty("item", item_r23)("index", index_r24);
} }
function DataTable_tbody_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tbody");
    ɵngcc0.ɵɵelementStart(1, "tr");
    ɵngcc0.ɵɵelementStart(2, "td");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("colspan", ctx_r3.columnCount);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r3.noDataMessage);
} }
function DataTable_tbody_15_tr_1_td_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "td", 21);
} if (rf & 2) {
    const column_r32 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("hide", !column_r32.visible);
} }
function DataTable_tbody_15_tr_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tr");
    ɵngcc0.ɵɵelement(1, "td", 21);
    ɵngcc0.ɵɵelementStart(2, "td", 21);
    ɵngcc0.ɵɵtext(3, "\u00A0");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(4, "td", 21);
    ɵngcc0.ɵɵtemplate(5, DataTable_tbody_15_tr_1_td_5_Template, 1, 1, "td", 28);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const index_r30 = ctx.index;
    const ctx_r28 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassProp("row-odd", (index_r30 + ctx_r28.items.length) % 2 === 0)("row-even", (index_r30 + ctx_r28.items.length) % 2 === 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("hide", !ctx_r28.expandColumnVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("hide", !ctx_r28.indexColumnVisible);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("hide", !ctx_r28.selectColumnVisible);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r28.columns);
} }
function DataTable_tbody_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "tbody", 26);
    ɵngcc0.ɵɵtemplate(1, DataTable_tbody_15_tr_1_Template, 6, 8, "tr", 27);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.substituteItems);
} }
function DataTable_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 29);
} }
function DataTable_data_table_pagination_17_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "data-table-pagination", 30);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("show_range", ctx_r6.pagination_range)("show_limit", ctx_r6.pagination_limit)("show_input", ctx_r6.pagination_input)("show_numbers", ctx_r6.pagination_numbers);
} }
const _c9 = function (a0, a1) { return [a0, a1]; };
function DataTablePagination_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementStart(2, "span");
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(4, " - ");
    ɵngcc0.ɵɵelementStart(5, "span");
    ɵngcc0.ɵɵtext(6);
    ɵngcc0.ɵɵpipe(7, "min");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(8, " / ");
    ɵngcc0.ɵɵelementStart(9, "span");
    ɵngcc0.ɵɵtext(10);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.dataTable.translations.paginationRange, ": ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.dataTable.offset + 1);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵtextInterpolate1(" ", ɵngcc0.ɵɵpipeBind1(7, 4, ɵngcc0.ɵɵpureFunction2(6, _c9, ctx_r0.dataTable.offset + ctx_r0.dataTable.limit, ctx_r0.dataTable.itemCount)), " ");
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.dataTable.itemCount);
} }
function DataTablePagination_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 6);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵelementStart(2, "span", 8);
    ɵngcc0.ɵɵelementStart(3, "span", 9);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(5, "input", 10, 11);
    ɵngcc0.ɵɵlistener("blur", function DataTablePagination_div_3_Template_input_blur_5_listener() { ɵngcc0.ɵɵrestoreView(_r5); const _r3 = ɵngcc0.ɵɵreference(6); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.limit = _r3.value; })("keyup.enter", function DataTablePagination_div_3_Template_input_keyup_enter_5_listener() { ɵngcc0.ɵɵrestoreView(_r5); const _r3 = ɵngcc0.ɵɵreference(6); const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.limit = _r3.value; })("keyup.esc", function DataTablePagination_div_3_Template_input_keyup_esc_5_listener() { ɵngcc0.ɵɵrestoreView(_r5); const _r3 = ɵngcc0.ɵɵreference(6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return _r3.value = ctx_r7.limit; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.dataTable.translations.paginationLimit, ": ");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.limit);
} }
function DataTablePagination_div_4_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r12 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵelementStart(1, "div", 7);
    ɵngcc0.ɵɵelementStart(2, "input", 19, 20);
    ɵngcc0.ɵɵlistener("blur", function DataTablePagination_div_4_div_5_Template_input_blur_2_listener() { ɵngcc0.ɵɵrestoreView(_r12); const _r10 = ɵngcc0.ɵɵreference(3); const ctx_r11 = ɵngcc0.ɵɵnextContext(2); return ctx_r11.page = _r10.value; })("keyup.enter", function DataTablePagination_div_4_div_5_Template_input_keyup_enter_2_listener() { ɵngcc0.ɵɵrestoreView(_r12); const _r10 = ɵngcc0.ɵɵreference(3); const ctx_r13 = ɵngcc0.ɵɵnextContext(2); return ctx_r13.page = _r10.value; })("keyup.esc", function DataTablePagination_div_4_div_5_Template_input_keyup_esc_2_listener() { ɵngcc0.ɵɵrestoreView(_r12); const _r10 = ɵngcc0.ɵɵreference(3); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return _r10.value = ctx_r14.page; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "div", 8);
    ɵngcc0.ɵɵelementStart(5, "span", 9);
    ɵngcc0.ɵɵelementStart(6, "span");
    ɵngcc0.ɵɵtext(7, "/");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(8, "span");
    ɵngcc0.ɵɵtext(9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵpropertyInterpolate("max", ctx_r8.maxPage);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r8.page);
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate(ctx_r8.dataTable.lastPage);
} }
function DataTablePagination_div_4_div_6_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r18 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 22);
    ɵngcc0.ɵɵlistener("click", function DataTablePagination_div_4_div_6_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r18); const i_r16 = ctx.$implicit; const ctx_r17 = ɵngcc0.ɵɵnextContext(3); return ctx_r17.page = i_r16; });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r16 = ctx.$implicit;
    const ctx_r15 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("disabled", i_r16 == ctx_r15.page);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", i_r16, " ");
} }
function DataTablePagination_div_4_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtemplate(1, DataTablePagination_div_4_div_6_button_1_Template, 2, 2, "button", 21);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r9.createPageRange(ctx_r9.maxPage, ctx_r9.page));
} }
function DataTablePagination_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "button", 13);
    ɵngcc0.ɵɵlistener("click", function DataTablePagination_div_4_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.pageFirst(); });
    ɵngcc0.ɵɵtext(2, " \u00AB ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "button", 14);
    ɵngcc0.ɵɵlistener("click", function DataTablePagination_div_4_Template_button_click_3_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r21 = ɵngcc0.ɵɵnextContext(); return ctx_r21.pageBack(); });
    ɵngcc0.ɵɵtext(4, " \u2039 ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, DataTablePagination_div_4_div_5_Template, 10, 3, "div", 15);
    ɵngcc0.ɵɵtemplate(6, DataTablePagination_div_4_div_6_Template, 2, 1, "div", 15);
    ɵngcc0.ɵɵelementStart(7, "button", 16);
    ɵngcc0.ɵɵlistener("click", function DataTablePagination_div_4_Template_button_click_7_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.pageForward(); });
    ɵngcc0.ɵɵtext(8, " \u203A ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "button", 17);
    ɵngcc0.ɵɵlistener("click", function DataTablePagination_div_4_Template_button_click_9_listener() { ɵngcc0.ɵɵrestoreView(_r20); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.pageLast(); });
    ɵngcc0.ɵɵtext(10, " \u00BB ");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.dataTable.offset <= 0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.dataTable.offset <= 0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.show_input);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.show_numbers);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.dataTable.offset + ctx_r2.dataTable.limit >= ctx_r2.dataTable.itemCount);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r2.dataTable.offset + ctx_r2.dataTable.limit >= ctx_r2.dataTable.itemCount);
} }
function DataTableHeader_div_9_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "input", 13);
    ɵngcc0.ɵɵlistener("ngModelChange", function DataTableHeader_div_9_div_1_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.dataTable.expandColumnVisible = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "label", 14);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r1.dataTable.expandColumnVisible);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.dataTable.translations.expandColumn, " ");
} }
function DataTableHeader_div_9_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "input", 15);
    ɵngcc0.ɵɵlistener("ngModelChange", function DataTableHeader_div_9_div_2_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.dataTable.indexColumnVisible = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "label", 16);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r2.dataTable.indexColumnVisible);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.dataTable.translations.indexColumn, " ");
} }
function DataTableHeader_div_9_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵelementStart(1, "input", 17);
    ɵngcc0.ɵɵlistener("ngModelChange", function DataTableHeader_div_9_div_3_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.dataTable.selectColumnVisible = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "label", 18);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", ctx_r3.dataTable.selectColumnVisible);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.dataTable.translations.selectColumn, " ");
} }
function DataTableHeader_div_9_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r14 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "input", 20);
    ɵngcc0.ɵɵlistener("ngModelChange", function DataTableHeader_div_9_div_4_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r14); const column_r11 = ctx.$implicit; return column_r11.visible = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(2, "label", 21);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r11 = ctx.$implicit;
    const i_r12 = ctx.index;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngModel", column_r11.visible)("id", "col-check" + i_r12);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", "col-check" + i_r12);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", column_r11.header, " ");
} }
function DataTableHeader_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵtemplate(1, DataTableHeader_div_9_div_1_Template, 4, 2, "div", 10);
    ɵngcc0.ɵɵtemplate(2, DataTableHeader_div_9_div_2_Template, 4, 2, "div", 10);
    ɵngcc0.ɵɵtemplate(3, DataTableHeader_div_9_div_3_Template, 4, 2, "div", 10);
    ɵngcc0.ɵɵtemplate(4, DataTableHeader_div_9_div_4_Template, 4, 4, "div", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.dataTable.expandableRows);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.dataTable.indexColumn);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.dataTable.selectColumn);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.dataTable.columns);
} }
let DataTableColumn = class DataTableColumn {
    constructor() {
        this.sortable = false;
        this.resizable = false;
        this.visible = true;
        this.styleClassObject = {}; // for [ngClass]
    }
    getCellColor(row, index) {
        if (this.cellColors !== undefined) {
            return this.cellColors(row.item, row, this, index);
        }
    }
    ngOnInit() {
        this._initCellClass();
    }
    _initCellClass() {
        if (!this.styleClass && this.property) {
            if (/^[a-zA-Z0-9_]+$/.test(this.property)) {
                this.styleClass = 'column-' + this.property;
            }
            else {
                this.styleClass =
                    'column-' + this.property.replace(/[^a-zA-Z0-9_]/g, '');
            }
        }
        if (this.styleClass != null) {
            this.styleClassObject = {
                [this.styleClass]: true
            };
        }
    }
};
DataTableColumn.ɵfac = function DataTableColumn_Factory(t) { return new (t || DataTableColumn)(); };
DataTableColumn.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableColumn, selectors: [["data-table-column"]], contentQueries: function DataTableColumn_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
    } }, inputs: { sortable: "sortable", resizable: "resizable", visible: "visible", styleClass: "styleClass", header: "header", property: "property", cellColors: "cellColors", width: "width" } });
__decorate([
    Input(),
    __metadata("design:type", String)
], DataTableColumn.prototype, "header", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTableColumn.prototype, "sortable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTableColumn.prototype, "resizable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DataTableColumn.prototype, "property", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DataTableColumn.prototype, "styleClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], DataTableColumn.prototype, "cellColors", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTableColumn.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTableColumn.prototype, "visible", void 0);
__decorate([
    ContentChild('dataTableCell'),
    __metadata("design:type", Object)
], DataTableColumn.prototype, "cellTemplate", void 0);
__decorate([
    ContentChild('dataTableHeader'),
    __metadata("design:type", Object)
], DataTableColumn.prototype, "headerTemplate", void 0);

let DataTableRow = class DataTableRow {
    constructor(dataTable) {
        this.dataTable = dataTable;
        this._this = this; // FIXME is there no template keyword for this in angular 2?
        this.selectedChange = new EventEmitter();
    }
    get selected() {
        return this._selected;
    }
    set selected(selected) {
        this._selected = selected;
        this.selectedChange.emit(selected);
    }
    // other:
    get displayIndex() {
        if (this.dataTable.pagination) {
            return this.dataTable.displayParams.offset + this.index + 1;
        }
        else {
            return this.index + 1;
        }
    }
    getTooltip() {
        if (this.dataTable.rowTooltip) {
            return this.dataTable.rowTooltip(this.item, this, this.index);
        }
        return '';
    }
    ngOnDestroy() {
        this.selected = false;
    }
};
DataTableRow.ɵfac = function DataTableRow_Factory(t) { return new (t || DataTableRow)(ɵngcc0.ɵɵdirectiveInject(forwardRef(() => DataTable))); };
DataTableRow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableRow, selectors: [["", "dataTableRow", ""]], inputs: { item: "item", index: "index" }, outputs: { selectedChange: "selectedChange" }, attrs: _c2, decls: 10, vars: 25, consts: [[1, "data-table-row", 3, "title", "dblclick", "click"], [3, "hide"], ["tabindex", "0", "role", "button", 1, "row-expand-button", 3, "title", "click"], ["aria-hidden", "true", 1, "fa", 3, "ngClass"], [1, "index-column", 3, "hide"], [1, "select-column", 3, "hide"], ["type", "checkbox", 3, "ngModel", "ngModelChange"], ["class", "data-column", 3, "hide", "ngClass", "background-color", 4, "ngFor", "ngForOf"], ["class", "row-expansion", 3, "hide", 4, "ngIf"], [1, "data-column", 3, "hide", "ngClass"], [4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "row-expansion", 3, "hide"]], template: function DataTableRow_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "tr", 0);
        ɵngcc0.ɵɵlistener("dblclick", function DataTableRow_Template_tr_dblclick_0_listener($event) { return ctx.dataTable.rowDoubleClicked(ctx._this, $event); })("click", function DataTableRow_Template_tr_click_0_listener($event) { return ctx.dataTable.rowClicked(ctx._this, $event); });
        ɵngcc0.ɵɵelementStart(1, "td", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵlistener("click", function DataTableRow_Template_div_click_2_listener($event) { ctx.expanded = !ctx.expanded; return $event.stopPropagation(); });
        ɵngcc0.ɵɵelement(3, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "td", 4);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "td", 5);
        ɵngcc0.ɵɵelementStart(7, "input", 6);
        ɵngcc0.ɵɵlistener("ngModelChange", function DataTableRow_Template_input_ngModelChange_7_listener($event) { return ctx.selected = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, DataTableRow_td_8_Template, 3, 6, "td", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, DataTableRow_tr_9_Template, 3, 7, "tr", 8);
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("background-color", ctx.dataTable.getRowColor(ctx.item, ctx.index, ctx._this));
        ɵngcc0.ɵɵclassProp("row-odd", ctx.index % 2 === 0)("row-even", ctx.index % 2 === 1)("selected", ctx.selected)("clickable", ctx.dataTable.selectOnRowClick);
        ɵngcc0.ɵɵproperty("title", ctx.getTooltip());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hide", !ctx.dataTable.expandColumnVisible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("title", ctx.dataTable.translations.expandRow);
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.expanded)("aria-label", ctx.dataTable.translations.expandRow);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(22, _c5, !ctx.expanded, ctx.expanded));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hide", !ctx.dataTable.indexColumnVisible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.displayIndex, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hide", !ctx.dataTable.selectColumnVisible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.selected);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.dataTable.columns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dataTable.expandableRows);
    } }, directives: function () { return [Hide, ɵngcc1.NgClass, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet]; }, styles: [".select-column[_ngcontent-%COMP%]{text-align:center}.row-expand-button[_ngcontent-%COMP%]{cursor:pointer;text-align:center}.clickable[_ngcontent-%COMP%]{cursor:pointer}"] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTableRow.prototype, "item", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DataTableRow.prototype, "index", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DataTableRow.prototype, "selectedChange", void 0);
DataTableRow = __decorate([ __param(0, Inject(forwardRef(() => DataTable))),
    __metadata("design:paramtypes", [DataTable])
], DataTableRow);

const defaultTranslations = {
    headerReload: 'reload',
    headerColumnSelector: 'column selector',
    indexColumn: 'index',
    selectColumn: 'select',
    selectRow: 'select',
    selectAllRows: 'select',
    expandColumn: 'expand',
    expandRow: 'expand',
    paginationLimit: 'Limit',
    paginationRange: 'Results'
};

function drag(event, { move: move, up: up }) {
    const startX = event.pageX;
    const startY = event.pageY;
    let x = startX;
    let y = startY;
    let moved = false;
    function mouseMoveHandler(event) {
        const dx = event.pageX - x;
        const dy = event.pageY - y;
        x = event.pageX;
        y = event.pageY;
        if (dx || dy) {
            moved = true;
        }
        move(event, dx, dy, x, y);
        event.preventDefault(); // to avoid text selection
    }
    function mouseUpHandler(event) {
        x = event.pageX;
        y = event.pageY;
        document.removeEventListener('mousemove', mouseMoveHandler);
        document.removeEventListener('mouseup', mouseUpHandler);
        if (up) {
            up(event, x, y, moved);
        }
    }
    document.addEventListener('mousemove', mouseMoveHandler);
    document.addEventListener('mouseup', mouseUpHandler);
}

let DataTable = class DataTable {
    constructor() {
        this._items = [];
        this.header = true;
        this.pagination = true;
        this.pagination_range = false;
        this.pagination_limit = false;
        this.pagination_input = false;
        this.pagination_numbers = true;
        this.indexColumn = true;
        this.indexColumnHeader = '';
        this.selectColumn = false;
        this.multiSelect = true;
        this.substituteRows = true;
        this.expandableRows = false;
        this.translations = defaultTranslations;
        this.selectOnRowClick = false;
        this.autoReload = true;
        this.showReloading = false;
        this._sortAsc = true;
        this._offset = 0;
        this._limit = 10;
        // event handlers:
        this.rowClick = new EventEmitter();
        this.rowDoubleClick = new EventEmitter();
        this.headerClick = new EventEmitter();
        this.cellClick = new EventEmitter();
        // Reloading:
        this._reloading = false;
        this.reload = new EventEmitter();
        this._displayParams = {}; // params of the last finished reload
        this._scheduledReload = null;
        this.selectedRows = [];
        this._selectAllCheckbox = false;
        // column resizing:
        this._resizeInProgress = false;
        this.resizeLimit = 30;
    }
    get items() {
        return this._items;
    }
    set items(items) {
        this._items = items;
        this._onReloadFinished();
    }
    get sortBy() {
        return this._sortBy;
    }
    set sortBy(value) {
        this._sortBy = value;
        this._triggerReload();
    }
    get sortAsc() {
        return this._sortAsc;
    }
    set sortAsc(value) {
        this._sortAsc = value;
        this._triggerReload();
    }
    get offset() {
        return this._offset;
    }
    set offset(value) {
        this._offset = value;
        this._triggerReload();
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
        this._triggerReload();
    }
    // calculated property:
    get page() {
        return Math.floor(this.offset / this.limit) + 1;
    }
    set page(value) {
        this.offset = (value - 1) * this.limit;
    }
    get lastPage() {
        return Math.ceil(this.itemCount / this.limit);
    }
    // setting multiple observable properties simultaneously
    sort(sortBy, asc) {
        this.sortBy = sortBy;
        this.sortAsc = asc;
    }
    // init
    ngOnInit() {
        this._initDefaultValues();
        this._initDefaultClickEvents();
        this._updateDisplayParams();
        if (this.autoReload && this._scheduledReload == null) {
            this.reloadItems();
        }
    }
    _initDefaultValues() {
        this.indexColumnVisible = this.indexColumn;
        this.selectColumnVisible = this.selectColumn;
        this.expandColumnVisible = this.expandableRows;
    }
    _initDefaultClickEvents() {
        this.headerClick.subscribe(tableEvent => this.sortColumn(tableEvent.column));
        if (this.selectOnRowClick) {
            this.rowClick.subscribe(tableEvent => (tableEvent.row.selected = !tableEvent.row.selected));
        }
    }
    get reloading() {
        return this._reloading;
    }
    reloadItems() {
        this._reloading = true;
        this.reload.emit(this._getRemoteParameters());
    }
    _onReloadFinished() {
        this._updateDisplayParams();
        this._selectAllCheckbox = false;
        this._reloading = false;
    }
    get displayParams() {
        return this._displayParams;
    }
    _updateDisplayParams() {
        this._displayParams = {
            sortBy: this.sortBy,
            sortAsc: this.sortAsc,
            offset: this.offset,
            limit: this.limit
        };
    }
    // for avoiding cascading reloads if multiple params are set at once:
    _triggerReload() {
        if (this._scheduledReload) {
            clearTimeout(this._scheduledReload);
        }
        this._scheduledReload = setTimeout(() => {
            this.reloadItems();
        });
    }
    rowClicked(row, event) {
        this.rowClick.emit({ row, event });
    }
    rowDoubleClicked(row, event) {
        this.rowDoubleClick.emit({ row, event });
    }
    headerClicked(column, event) {
        if (!this._resizeInProgress) {
            event.preventDefault();
            event.stopPropagation();
            this.headerClick.emit({ column, event });
        }
        else {
            this._resizeInProgress = false; // this is because I can't prevent click from mousup of the drag end
        }
    }
    cellClicked(column, row, event) {
        this.cellClick.emit({ row, column, event });
    }
    // functions:
    _getRemoteParameters() {
        let params = {};
        if (this.sortBy) {
            params.sortBy = this.sortBy;
            params.sortAsc = this.sortAsc;
        }
        if (this.pagination) {
            params.offset = this.offset;
            params.limit = this.limit;
        }
        return params;
    }
    sortColumn(column) {
        if (column.sortable) {
            let ascending = this.sortBy === column.property ? !this.sortAsc : true;
            this.sort(column.property, ascending);
        }
    }
    get columnCount() {
        let count = 0;
        count += this.indexColumnVisible ? 1 : 0;
        count += this.selectColumnVisible ? 1 : 0;
        count += this.expandColumnVisible ? 1 : 0;
        this.columns.toArray().forEach(column => {
            count += column.visible ? 1 : 0;
        });
        return count;
    }
    getRowColor(item, index, row) {
        if (this.rowColors !== undefined) {
            return this.rowColors(item, row, index);
        }
    }
    get selectAllCheckbox() {
        return this._selectAllCheckbox;
    }
    set selectAllCheckbox(value) {
        this._selectAllCheckbox = value;
        this._onSelectAllChanged(value);
    }
    _onSelectAllChanged(value) {
        this.rows.toArray().forEach(row => (row.selected = value));
    }
    onRowSelectChanged(row) {
        // maintain the selectedRow(s) view
        if (this.multiSelect) {
            let index = this.selectedRows.indexOf(row);
            if (row.selected && index < 0) {
                this.selectedRows.push(row);
            }
            else if (!row.selected && index >= 0) {
                this.selectedRows.splice(index, 1);
            }
        }
        else {
            if (row.selected) {
                this.selectedRow = row;
            }
            else if (this.selectedRow === row) {
                this.selectedRow = undefined;
            }
        }
        // unselect all other rows:
        if (row.selected && !this.multiSelect) {
            this.rows
                .toArray()
                .filter(row_ => row_.selected)
                .forEach(row_ => {
                if (row_ !== row) {
                    // avoid endless loop
                    row_.selected = false;
                }
            });
        }
    }
    // other:
    get substituteItems() {
        return Array.from({ length: this.displayParams.limit - this.items.length });
    }
    resizeColumnStart(event, column, columnElement) {
        this._resizeInProgress = true;
        drag(event, {
            move: (moveEvent, dx) => {
                if (this._isResizeInLimit(columnElement, dx)) {
                    column.width = columnElement.offsetWidth + dx;
                }
            }
        });
    }
    _isResizeInLimit(columnElement, dx) {
        /* This is needed because CSS min-width didn't work on table-layout: fixed.
         Without the limits, resizing can make the next column disappear completely,
         and even increase the table width. The current implementation suffers from the fact,
         that offsetWidth sometimes contains out-of-date values. */
        if ((dx < 0 && columnElement.offsetWidth + dx <= this.resizeLimit) ||
            !columnElement.nextElementSibling || // resizing doesn't make sense for the last visible column
            (dx >= 0 &&
                columnElement.nextElementSibling.offsetWidth + dx <=
                    this.resizeLimit)) {
            return false;
        }
        return true;
    }
};
DataTable.ɵfac = function DataTable_Factory(t) { return new (t || DataTable)(); };
DataTable.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTable, selectors: [["data-table"]], contentQueries: function DataTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c6, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DataTableColumn, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.expandTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columns = _t);
    } }, viewQuery: function DataTable_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(DataTableRow, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rows = _t);
    } }, inputs: { header: "header", pagination: "pagination", pagination_range: "pagination_range", pagination_limit: "pagination_limit", pagination_input: "pagination_input", pagination_numbers: "pagination_numbers", indexColumn: "indexColumn", indexColumnHeader: "indexColumnHeader", selectColumn: "selectColumn", multiSelect: "multiSelect", substituteRows: "substituteRows", expandableRows: "expandableRows", translations: "translations", selectOnRowClick: "selectOnRowClick", autoReload: "autoReload", showReloading: "showReloading", items: "items", sortBy: "sortBy", sortAsc: "sortAsc", offset: "offset", limit: "limit", page: "page", itemCount: "itemCount", headerTitle: "headerTitle", rowColors: "rowColors", rowTooltip: "rowTooltip", noDataMessage: "noDataMessage" }, outputs: { rowClick: "rowClick", rowDoubleClick: "rowDoubleClick", headerClick: "headerClick", cellClick: "cellClick", reload: "reload" }, decls: 18, vars: 14, consts: [[1, "data-table-wrapper"], [4, "ngIf"], [1, "data-table-box"], [1, "table", "table-condensed", "table-bordered", "data-table"], ["scope", "col", 1, "expand-column-header", 3, "hide"], ["scope", "col", 1, "index-column-header", 3, "hide"], ["scope", "col", 1, "select-column-header", 3, "hide"], ["type", "checkbox", 3, "hide", "ngModel", "ngModelChange"], ["scope", "col", "class", "column-header", 3, "hide", "sortable", "resizable", "ngClass", "width", "click", "keyup.enter", "keyup.space", 4, "ngFor", "ngForOf"], ["class", "data-table-row-wrapper", "dataTableRow", "", 3, "item", "index", "selectedChange", 4, "ngFor", "ngForOf"], ["class", "substitute-rows", 4, "ngIf"], ["class", "loading-cover", 4, "ngIf"], [3, "show_range", "show_limit", "show_input", "show_numbers", 4, "ngIf"], ["scope", "col", 1, "column-header", 3, "hide", "ngClass", "click", "keyup.enter", "keyup.space"], ["th", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], ["class", "column-sort-icon", 4, "ngIf"], ["class", "column-resize-handle", 3, "mousedown", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "column-sort-icon"], [1, "fa", "fa-sort", "column-sortable-icon", 3, "hide"], [3, "hide"], [1, "fa", 3, "ngClass"], [1, "column-resize-handle", 3, "mousedown"], ["dataTableRow", "", 1, "data-table-row-wrapper", 3, "item", "index", "selectedChange"], ["row", ""], [1, "substitute-rows"], [3, "row-odd", "row-even", 4, "ngFor", "ngForOf"], [3, "hide", 4, "ngFor", "ngForOf"], [1, "loading-cover"], [3, "show_range", "show_limit", "show_input", "show_numbers"]], template: function DataTable_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DataTable_data_table_header_1_Template, 1, 0, "data-table-header", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "table", 3);
        ɵngcc0.ɵɵelementStart(4, "thead");
        ɵngcc0.ɵɵelementStart(5, "tr");
        ɵngcc0.ɵɵelement(6, "th", 4);
        ɵngcc0.ɵɵelementStart(7, "th", 5);
        ɵngcc0.ɵɵelementStart(8, "span");
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "th", 6);
        ɵngcc0.ɵɵelementStart(11, "input", 7);
        ɵngcc0.ɵɵlistener("ngModelChange", function DataTable_Template_input_ngModelChange_11_listener($event) { return ctx.selectAllCheckbox = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(12, DataTable_th_12_Template, 7, 16, "th", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(13, DataTable_tbody_13_Template, 2, 2, "tbody", 9);
        ɵngcc0.ɵɵtemplate(14, DataTable_tbody_14_Template, 4, 2, "tbody", 1);
        ɵngcc0.ɵɵtemplate(15, DataTable_tbody_15_Template, 2, 1, "tbody", 10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(16, DataTable_div_16_Template, 1, 0, "div", 11);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(17, DataTable_data_table_pagination_17_Template, 1, 4, "data-table-pagination", 12);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.header);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("hide", !ctx.expandColumnVisible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hide", !ctx.indexColumnVisible);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.indexColumnHeader);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hide", !ctx.selectColumnVisible);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("hide", !ctx.multiSelect)("ngModel", ctx.selectAllCheckbox);
        ɵngcc0.ɵɵattribute("aria-label", ctx.translations.selectAllRows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.columns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.items);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.itemCount === 0 && ctx.noDataMessage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pagination && ctx.substituteRows);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showReloading && ctx.reloading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.pagination);
    } }, directives: function () { return [ɵngcc1.NgIf, Hide, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgForOf, DataTableHeader, ɵngcc1.NgClass, ɵngcc1.NgTemplateOutlet, DataTableRow,
        DataTablePagination]; }, pipes: function () { return [PixelConverter]; }, styles: ["[_nghost-%COMP%]     .data-table.table>tbody+tbody{border-top:none}[_nghost-%COMP%]     .data-table.table td{vertical-align:middle}[_nghost-%COMP%]     .data-table>tbody>tr>td, [_nghost-%COMP%]     .data-table>thead>tr>th{overflow:hidden}[_nghost-%COMP%]     .row-odd{background-color:#f6f6f6}.data-table[_ngcontent-%COMP%]   .substitute-rows[_ngcontent-%COMP%] > tr[_ngcontent-%COMP%]:hover, [_nghost-%COMP%]     .data-table .data-table-row:hover{background-color:#ececec}.data-table[_ngcontent-%COMP%]{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header[_ngcontent-%COMP%]{position:relative}.expand-column-header[_ngcontent-%COMP%]{width:50px}.select-column-header[_ngcontent-%COMP%]{width:50px;text-align:center}.index-column-header[_ngcontent-%COMP%]{width:40px}.column-header.sortable[_ngcontent-%COMP%]{cursor:pointer}.column-header[_ngcontent-%COMP%]   .column-sort-icon[_ngcontent-%COMP%]{float:right}.column-header.resizable[_ngcontent-%COMP%]   .column-sort-icon[_ngcontent-%COMP%]{margin-right:8px}.column-header[_ngcontent-%COMP%]   .column-sort-icon[_ngcontent-%COMP%]   .column-sortable-icon[_ngcontent-%COMP%]{color:#d3d3d3}.column-header[_ngcontent-%COMP%]   .column-resize-handle[_ngcontent-%COMP%]{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box[_ngcontent-%COMP%]{position:relative}.loading-cover[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}"] });
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DataTable.prototype, "items", null);
__decorate([
    Input(),
    __metadata("design:type", Number)
], DataTable.prototype, "itemCount", void 0);
__decorate([
    ContentChildren(DataTableColumn),
    __metadata("design:type", QueryList)
], DataTable.prototype, "columns", void 0);
__decorate([
    ViewChildren(DataTableRow),
    __metadata("design:type", QueryList)
], DataTable.prototype, "rows", void 0);
__decorate([
    ContentChild('dataTableExpand'),
    __metadata("design:type", TemplateRef)
], DataTable.prototype, "expandTemplate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DataTable.prototype, "headerTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "header", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "pagination", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "pagination_range", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "pagination_limit", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "pagination_input", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "pagination_numbers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "indexColumn", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "indexColumnHeader", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], DataTable.prototype, "rowColors", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], DataTable.prototype, "rowTooltip", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "selectColumn", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "multiSelect", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "substituteRows", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "expandableRows", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "translations", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "selectOnRowClick", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "autoReload", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTable.prototype, "showReloading", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], DataTable.prototype, "noDataMessage", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DataTable.prototype, "rowClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DataTable.prototype, "rowDoubleClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DataTable.prototype, "headerClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DataTable.prototype, "cellClick", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DataTable.prototype, "sortBy", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DataTable.prototype, "sortAsc", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DataTable.prototype, "offset", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DataTable.prototype, "limit", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DataTable.prototype, "page", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], DataTable.prototype, "reload", void 0);

let DataTablePagination = class DataTablePagination {
    constructor(dataTable) {
        this.dataTable = dataTable;
        this.show_range = false;
        this.show_limit = false;
        this.show_input = false;
        this.show_numbers = true;
    }
    pageBack() {
        this.dataTable.offset -= Math.min(this.dataTable.limit, this.dataTable.offset);
    }
    pageForward() {
        this.dataTable.offset += this.dataTable.limit;
    }
    pageFirst() {
        this.dataTable.offset = 0;
    }
    pageLast() {
        this.dataTable.offset = (this.maxPage - 1) * this.dataTable.limit;
    }
    get maxPage() {
        return Math.ceil(this.dataTable.itemCount / this.dataTable.limit);
    }
    get limit() {
        return this.dataTable.limit;
    }
    set limit(value) {
        this.dataTable.limit = Number(value); // TODO better way to handle that value of number <input> is string?
    }
    get page() {
        return this.dataTable.page;
    }
    set page(value) {
        this.dataTable.page = Number(value);
    }
    createPageRange(number, page) {
        const displayedPage = 3;
        let items = [];
        if (number > 1) {
            let maxPage = number;
            let minPage = 1;
            if (page === 1 && maxPage >= displayedPage) {
                maxPage = 3;
            }
            else if (page > 1 && maxPage > page + 1) {
                minPage = page - 1;
                maxPage = page + 1;
            }
            else if (page > 2 && maxPage > page) {
                minPage = page - 1;
                maxPage = page + 1;
            }
            else if (page > 2 && maxPage === page) {
                minPage = page - 2;
                maxPage = page;
            }
            for (let i = minPage; i <= maxPage; i++) {
                items.push(i);
            }
        }
        return items;
    }
};
DataTablePagination.ɵfac = function DataTablePagination_Factory(t) { return new (t || DataTablePagination)(ɵngcc0.ɵɵdirectiveInject(forwardRef(() => DataTable))); };
DataTablePagination.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTablePagination, selectors: [["data-table-pagination"]], inputs: { show_range: "show_range", show_limit: "show_limit", show_input: "show_input", show_numbers: "show_numbers" }, decls: 5, vars: 3, consts: [[1, "pagination-box", "d-flex", "justify-content-between"], ["class", "pagination-range", 4, "ngIf"], [1, "pagination-controllers", "d-flex"], ["class", "pagination-limit", 4, "ngIf"], ["class", "pagination-pages d-flex", 4, "ngIf"], [1, "pagination-range"], [1, "pagination-limit"], [1, "input-group"], [1, "input-group-prepend"], [1, "input-group-text"], ["type", "number", "min", "1", "step", "1", 1, "form-control", 3, "ngModel", "blur", "keyup.enter", "keyup.esc"], ["limitInput", ""], [1, "pagination-pages", "d-flex"], [1, "btn", "btn-secondary", "pagination-firstpage", 3, "disabled", "click"], [1, "btn", "btn-secondary", "pagination-prevpage", "mx-1", 3, "disabled", "click"], ["class", "pagination-page", 4, "ngIf"], [1, "btn", "btn-secondary", "pagination-nextpage", "mx-1", 3, "disabled", "click"], [1, "btn", "btn-secondary", "pagination-lastpage", 3, "disabled", "click"], [1, "pagination-page"], ["type", "number", "min", "1", "step", "1", 1, "form-control", 3, "max", "ngModel", "blur", "keyup.enter", "keyup.esc"], ["pageInput", ""], ["class", "btn btn-default", 3, "disabled", "click", 4, "ngFor", "ngForOf"], [1, "btn", "btn-default", 3, "disabled", "click"]], template: function DataTablePagination_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, DataTablePagination_div_1_Template, 11, 9, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, DataTablePagination_div_3_Template, 7, 2, "div", 3);
        ɵngcc0.ɵɵtemplate(4, DataTablePagination_div_4_Template, 11, 6, "div", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.show_range);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.show_limit);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.maxPage > 1);
    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc2.NumberValueAccessor, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgForOf]; }, pipes: function () { return [MinPipe]; }, styles: [".pagination-box[_ngcontent-%COMP%]{position:relative;margin-top:-10px}.pagination-range[_ngcontent-%COMP%]{display:flex;align-items:center;margin-left:3px}.pagination-range[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{margin:0 4px}.pagination-range[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:last-child{margin-right:0;margin-left:4px}.pagination-controllers[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{min-width:60px;text-align:right}.pagination-limit[_ngcontent-%COMP%]{margin-right:25px;min-width:150px;max-width:200px}.pagination-page[_ngcontent-%COMP%]{width:110px}.pagination-reload[_ngcontent-%COMP%]{color:gray;font-size:12px}"] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTablePagination.prototype, "show_range", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTablePagination.prototype, "show_limit", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTablePagination.prototype, "show_input", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], DataTablePagination.prototype, "show_numbers", void 0);
DataTablePagination = __decorate([ __param(0, Inject(forwardRef(() => DataTable))),
    __metadata("design:paramtypes", [DataTable])
], DataTablePagination);

let DataTableHeader = class DataTableHeader {
    constructor(dataTable) {
        this.dataTable = dataTable;
        this.columnSelectorOpen = false;
    }
    _closeSelector() {
        this.columnSelectorOpen = false;
    }
};
DataTableHeader.ɵfac = function DataTableHeader_Factory(t) { return new (t || DataTableHeader)(ɵngcc0.ɵɵdirectiveInject(forwardRef(() => DataTable))); };
DataTableHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableHeader, selectors: [["data-table-header"]], hostBindings: function DataTableHeader_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function DataTableHeader_click_HostBindingHandler() { return ctx._closeSelector(); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, decls: 10, vars: 8, consts: [[1, "data-table-header", "d-flex", "justify-content-between"], [1, "title"], [1, "button-panel"], ["type", "button", 1, "btn", "btn-secondary", "btn-sm", "refresh-button", "mr-1", 3, "title", "click"], [1, "fa", "fa-refresh"], ["type", "button", 1, "btn", "btn-secondary", "btn-sm", "column-selector-button", 3, "title", "click"], [1, "fa", "fa-list"], [1, "column-selector-wrapper", 3, "click"], ["class", "column-selector-box card", 4, "ngIf"], [1, "column-selector-box", "card"], ["class", "column-selector-fixed-column form-check", 4, "ngIf"], ["class", "column-selector-column form-check", 4, "ngFor", "ngForOf"], [1, "column-selector-fixed-column", "form-check"], ["type", "checkbox", "id", "check1", 1, "form-check-input", 3, "ngModel", "ngModelChange"], ["for", "check1", 1, "form-check-label"], ["type", "checkbox", "id", "check2", 1, "form-check-input", 3, "ngModel", "ngModelChange"], ["for", "check2", 1, "form-check-label"], ["type", "checkbox", "id", "check3", 1, "form-check-input", 3, "ngModel", "ngModelChange"], ["for", "check3", 1, "form-check-label"], [1, "column-selector-column", "form-check"], ["type", "checkbox", 1, "form-check-input", 3, "ngModel", "id", "ngModelChange"], [1, "form-check-label", 3, "for"]], template: function DataTableHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "h4", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵelementStart(4, "button", 3);
        ɵngcc0.ɵɵlistener("click", function DataTableHeader_Template_button_click_4_listener() { return ctx.dataTable.reloadItems(); });
        ɵngcc0.ɵɵelement(5, "span", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "button", 5);
        ɵngcc0.ɵɵlistener("click", function DataTableHeader_Template_button_click_6_listener($event) { ctx.columnSelectorOpen = !ctx.columnSelectorOpen; return $event.stopPropagation(); });
        ɵngcc0.ɵɵelement(7, "span", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 7);
        ɵngcc0.ɵɵlistener("click", function DataTableHeader_Template_div_click_8_listener($event) { return $event.stopPropagation(); });
        ɵngcc0.ɵɵtemplate(9, DataTableHeader_div_9_Template, 5, 4, "div", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.dataTable.headerTitle);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("title", ctx.dataTable.translations.headerReload);
        ɵngcc0.ɵɵattribute("aria-label", ctx.dataTable.translations.headerReload);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵclassProp("active", ctx.columnSelectorOpen);
        ɵngcc0.ɵɵproperty("title", ctx.dataTable.translations.headerColumnSelector);
        ɵngcc0.ɵɵattribute("aria-label", ctx.dataTable.translations.headerColumnSelector);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.columnSelectorOpen);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel], styles: [".data-table-header[_ngcontent-%COMP%]{min-height:25px;margin-bottom:10px}.title[_ngcontent-%COMP%]{margin:5px 0 0 5px}.column-selector-wrapper[_ngcontent-%COMP%]{position:relative}.column-selector-box[_ngcontent-%COMP%]{box-shadow:0 0 10px #d3d3d3;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-fixed-column[_ngcontent-%COMP%]{font-style:italic}"] });
DataTableHeader = __decorate([ __param(0, Inject(forwardRef(() => DataTable))),
    __metadata("design:paramtypes", [DataTable])
], DataTableHeader);

let PixelConverter = class PixelConverter {
    transform(value, args) {
        if (value === undefined) {
            return;
        }
        if (typeof value === 'string') {
            return value;
        }
        if (typeof value === 'number') {
            return value + 'px';
        }
    }
};
PixelConverter.ɵfac = function PixelConverter_Factory(t) { return new (t || PixelConverter)(); };
PixelConverter.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "px", type: PixelConverter, pure: true });

function isBlank(obj) {
    return obj === undefined || obj === null;
}
let Hide = class Hide {
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._prevCondition = null;
    }
    set hide(newCondition) {
        this.initDisplayStyle();
        if (newCondition &&
            (isBlank(this._prevCondition) || !this._prevCondition)) {
            this._prevCondition = true;
            this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', 'none');
        }
        else if (!newCondition &&
            (isBlank(this._prevCondition) || this._prevCondition)) {
            this._prevCondition = false;
            this._renderer.setElementStyle(this._elementRef.nativeElement, 'display', this._displayStyle);
        }
    }
    initDisplayStyle() {
        if (this._displayStyle === undefined) {
            const displayStyle = this._elementRef.nativeElement.style.display;
            if (displayStyle && displayStyle !== 'none') {
                this._displayStyle = displayStyle;
            }
        }
    }
};
Hide.ɵfac = function Hide_Factory(t) { return new (t || Hide)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
Hide.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Hide, selectors: [["", "hide", ""]], inputs: { hide: "hide" } });
Hide = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer])
], Hide);

let MinPipe = class MinPipe {
    transform(value, args) {
        return Math.min.apply(null, value);
    }
};
MinPipe.ɵfac = function MinPipe_Factory(t) { return new (t || MinPipe)(); };
MinPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "min", type: MinPipe, pure: true });

class DataTableResource {
    constructor(items) {
        this.items = items;
    }
    query(params, filter) {
        let result = [];
        if (filter) {
            result = this.items.filter(filter);
        }
        else {
            result = this.items.slice(); // shallow copy to use for sorting instead of changing the original
        }
        if (params.sortBy) {
            result.sort((a, b) => {
                if (typeof a[params.sortBy] === 'string') {
                    return a[params.sortBy].localeCompare(b[params.sortBy]);
                }
                else {
                    return a[params.sortBy] - b[params.sortBy];
                }
            });
            if (params.sortAsc === false) {
                result.reverse();
            }
        }
        if (params.offset !== undefined) {
            if (params.limit === undefined) {
                result = result.slice(params.offset, result.length);
            }
            else {
                result = result.slice(params.offset, params.offset + params.limit);
            }
        }
        return new Promise((resolve, reject) => {
            setTimeout(() => resolve(result));
        });
    }
    count() {
        return new Promise((resolve, reject) => {
            setTimeout(() => resolve(this.items.length));
        });
    }
}

const DATA_TABLE_DIRECTIVES = [DataTable, DataTableColumn];
let DataTableModule = class DataTableModule {
};
DataTableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DataTableModule });
DataTableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DataTableModule_Factory(t) { return new (t || DataTableModule)(); }, imports: [[CommonModule, FormsModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableColumn, [{
        type: Directive,
        args: [{
                selector: 'data-table-column'
            }]
    }], function () { return []; }, { sortable: [{
            type: Input
        }], resizable: [{
            type: Input
        }], visible: [{
            type: Input
        }], styleClass: [{
            type: Input
        }], header: [{
            type: Input
        }], property: [{
            type: Input
        }], cellColors: [{
            type: Input
        }], width: [{
            type: Input
        }], cellTemplate: [{
            type: ContentChild,
            args: ['dataTableCell']
        }], headerTemplate: [{
            type: ContentChild,
            args: ['dataTableHeader']
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableRow, [{
        type: Component,
        args: [{
                selector: '[dataTableRow]',
                template: "<tr\n  class=\"data-table-row\"\n  [title]=\"getTooltip()\"\n  [style.background-color]=\"dataTable.getRowColor(item, index, _this)\"\n  [class.row-odd]=\"index % 2 === 0\"\n  [class.row-even]=\"index % 2 === 1\"\n  [class.selected]=\"selected\"\n  [class.clickable]=\"dataTable.selectOnRowClick\"\n  (dblclick)=\"dataTable.rowDoubleClicked(_this, $event)\"\n  (click)=\"dataTable.rowClicked(_this, $event)\"\n>\n  <td [hide]=\"!dataTable.expandColumnVisible\">\n    <div\n      tabindex=\"0\"\n      role=\"button\"\n      (click)=\"expanded = !expanded; $event.stopPropagation()\"\n      class=\"row-expand-button\"\n      [attr.aria-expanded]=\"expanded\"\n      [title]=\"dataTable.translations.expandRow\"\n      [attr.aria-label]=\"dataTable.translations.expandRow\"\n    >\n      <span\n        class=\"fa\"\n        [ngClass]=\"{\n          'fa-caret-right': !expanded,\n          'fa-caret-bottom': expanded\n        }\"\n        aria-hidden=\"true\"\n      ></span>\n    </div>\n  </td>\n  <td [hide]=\"!dataTable.indexColumnVisible\" class=\"index-column\">\n    {{ displayIndex }}\n  </td>\n  <td [hide]=\"!dataTable.selectColumnVisible\" class=\"select-column\">\n    <input type=\"checkbox\" [(ngModel)]=\"selected\" />\n  </td>\n  <td\n    *ngFor=\"let column of dataTable.columns\"\n    [hide]=\"!column.visible\"\n    [ngClass]=\"column.styleClassObject\"\n    class=\"data-column\"\n    [style.background-color]=\"column.getCellColor(_this, index)\"\n  >\n    <div *ngIf=\"!column.cellTemplate\">\n      {{ item[column.property] }}\n    </div>\n    <div\n      *ngIf=\"column.cellTemplate\"\n      [ngTemplateOutlet]=\"column.cellTemplate\"\n      [ngTemplateOutletContext]=\"{ column: column, row: _this, item: item }\"\n    ></div>\n  </td>\n</tr>\n<tr *ngIf=\"dataTable.expandableRows\" [hide]=\"!expanded\" class=\"row-expansion\">\n  <td [attr.colspan]=\"dataTable.columnCount\">\n    <div\n      [ngTemplateOutlet]=\"dataTable.expandTemplate\"\n      [ngTemplateOutletContext]=\"{ row: _this, item: item }\"\n    ></div>\n  </td>\n</tr>\n",
                styles: [".select-column{text-align:center}.row-expand-button{cursor:pointer;text-align:center}.clickable{cursor:pointer}"]
            }]
    }], function () { return [{ type: DataTable, decorators: [{
                type: Inject,
                args: [forwardRef(() => DataTable)]
            }] }]; }, { selectedChange: [{
            type: Output
        }], item: [{
            type: Input
        }], index: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTable, [{
        type: Component,
        args: [{
                selector: 'data-table',
                template: "<div class=\"data-table-wrapper\">\n  <data-table-header *ngIf=\"header\"></data-table-header>\n\n  <div class=\"data-table-box\">\n    <table class=\"table table-condensed table-bordered data-table\">\n      <thead>\n        <tr>\n          <th\n            scope=\"col\"\n            [hide]=\"!expandColumnVisible\"\n            class=\"expand-column-header\"\n          ></th>\n          <th\n            scope=\"col\"\n            [hide]=\"!indexColumnVisible\"\n            class=\"index-column-header\"\n          >\n            <span>{{ indexColumnHeader }}</span>\n          </th>\n          <th\n            scope=\"col\"\n            [hide]=\"!selectColumnVisible\"\n            class=\"select-column-header\"\n          >\n            <input\n              [hide]=\"!multiSelect\"\n              type=\"checkbox\"\n              [(ngModel)]=\"selectAllCheckbox\"\n              [attr.aria-label]=\"translations.selectAllRows\"\n            />\n          </th>\n          <th\n            scope=\"col\"\n            *ngFor=\"let column of columns\"\n            #th\n            [hide]=\"!column.visible\"\n            (click)=\"headerClicked(column, $event)\"\n            (keyup.enter)=\"headerClicked(column, $event)\"\n            (keyup.space)=\"headerClicked(column, $event)\"\n            [class.sortable]=\"column.sortable\"\n            [class.resizable]=\"column.resizable\"\n            [ngClass]=\"column.styleClassObject\"\n            class=\"column-header\"\n            [style.width]=\"column.width | px\"\n            [attr.aria-sort]=\"\n              column.sortable\n                ? column.property === sortBy\n                  ? sortAsc\n                    ? 'ascending'\n                    : 'descending'\n                  : 'none'\n                : null\n            \"\n            [attr.tabindex]=\"column.sortable ? '0' : null\"\n          >\n            <span *ngIf=\"!column.headerTemplate\">\n              {{ column.header }}\n            </span>\n            <span\n              *ngIf=\"column.headerTemplate\"\n              [ngTemplateOutlet]=\"column.headerTemplate\"\n              [ngTemplateOutletContext]=\"{ column: column }\"\n            ></span>\n            <span class=\"column-sort-icon\" *ngIf=\"column.sortable\">\n              <span\n                class=\"fa fa-sort column-sortable-icon\"\n                [hide]=\"column.property === sortBy\"\n              ></span>\n              <span [hide]=\"column.property !== sortBy\">\n                <span\n                  class=\"fa\"\n                  [ngClass]=\"{\n                    'fa-caret-top': !sortAsc,\n                    'fa-caret-bottom': sortAsc\n                  }\"\n                ></span>\n              </span>\n            </span>\n            <span\n              *ngIf=\"column.resizable\"\n              class=\"column-resize-handle\"\n              (mousedown)=\"resizeColumnStart($event, column, th)\"\n            ></span>\n          </th>\n        </tr>\n      </thead>\n      <tbody\n        *ngFor=\"let item of items; let index = index\"\n        class=\"data-table-row-wrapper\"\n        dataTableRow\n        #row\n        [item]=\"item\"\n        [index]=\"index\"\n        (selectedChange)=\"onRowSelectChanged(row)\"\n      ></tbody>\n      <tbody *ngIf=\"itemCount === 0 && noDataMessage\">\n        <tr>\n          <td [attr.colspan]=\"columnCount\">{{ noDataMessage }}</td>\n        </tr>\n      </tbody>\n      <tbody class=\"substitute-rows\" *ngIf=\"pagination && substituteRows\">\n        <tr\n          *ngFor=\"let item of substituteItems; let index = index\"\n          [class.row-odd]=\"(index + items.length) % 2 === 0\"\n          [class.row-even]=\"(index + items.length) % 2 === 1\"\n        >\n          <td [hide]=\"!expandColumnVisible\"></td>\n          <td [hide]=\"!indexColumnVisible\">&nbsp;</td>\n          <td [hide]=\"!selectColumnVisible\"></td>\n          <td *ngFor=\"let column of columns\" [hide]=\"!column.visible\"></td>\n        </tr>\n      </tbody>\n    </table>\n    <div class=\"loading-cover\" *ngIf=\"showReloading && reloading\"></div>\n  </div>\n\n  <data-table-pagination\n    *ngIf=\"pagination\"\n    [show_range]=\"pagination_range\"\n    [show_limit]=\"pagination_limit\"\n    [show_input]=\"pagination_input\"\n    [show_numbers]=\"pagination_numbers\"\n  ></data-table-pagination>\n</div>\n",
                styles: [":host /deep/ .data-table.table>tbody+tbody{border-top:none}:host /deep/ .data-table.table td{vertical-align:middle}:host /deep/ .data-table>tbody>tr>td,:host /deep/ .data-table>thead>tr>th{overflow:hidden}:host /deep/ .row-odd{background-color:#f6f6f6}.data-table .substitute-rows>tr:hover,:host /deep/ .data-table .data-table-row:hover{background-color:#ececec}.data-table{box-shadow:0 0 15px #ececec;table-layout:fixed}.column-header{position:relative}.expand-column-header{width:50px}.select-column-header{width:50px;text-align:center}.index-column-header{width:40px}.column-header.sortable{cursor:pointer}.column-header .column-sort-icon{float:right}.column-header.resizable .column-sort-icon{margin-right:8px}.column-header .column-sort-icon .column-sortable-icon{color:#d3d3d3}.column-header .column-resize-handle{position:absolute;top:0;right:0;margin:0;padding:0;width:8px;height:100%;cursor:col-resize}.data-table-box{position:relative}.loading-cover{position:absolute;width:100%;height:100%;background-color:rgba(255,255,255,.3);top:0}"]
            }]
    }], function () { return []; }, { header: [{
            type: Input
        }], pagination: [{
            type: Input
        }], pagination_range: [{
            type: Input
        }], pagination_limit: [{
            type: Input
        }], pagination_input: [{
            type: Input
        }], pagination_numbers: [{
            type: Input
        }], indexColumn: [{
            type: Input
        }], indexColumnHeader: [{
            type: Input
        }], selectColumn: [{
            type: Input
        }], multiSelect: [{
            type: Input
        }], substituteRows: [{
            type: Input
        }], expandableRows: [{
            type: Input
        }], translations: [{
            type: Input
        }], selectOnRowClick: [{
            type: Input
        }], autoReload: [{
            type: Input
        }], showReloading: [{
            type: Input
        }], rowClick: [{
            type: Output
        }], rowDoubleClick: [{
            type: Output
        }], headerClick: [{
            type: Output
        }], cellClick: [{
            type: Output
        }], reload: [{
            type: Output
        }], items: [{
            type: Input
        }], sortBy: [{
            type: Input
        }], sortAsc: [{
            type: Input
        }], offset: [{
            type: Input
        }], limit: [{
            type: Input
        }], page: [{
            type: Input
        }], itemCount: [{
            type: Input
        }], columns: [{
            type: ContentChildren,
            args: [DataTableColumn]
        }], rows: [{
            type: ViewChildren,
            args: [DataTableRow]
        }], expandTemplate: [{
            type: ContentChild,
            args: ['dataTableExpand']
        }], headerTitle: [{
            type: Input
        }], rowColors: [{
            type: Input
        }], rowTooltip: [{
            type: Input
        }], noDataMessage: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTablePagination, [{
        type: Component,
        args: [{
                selector: 'data-table-pagination',
                template: "<div class=\"pagination-box d-flex justify-content-between\">\n  <div class=\"pagination-range\" *ngIf=\"show_range\">\n    {{ dataTable.translations.paginationRange }}:\n    <span>{{ dataTable.offset + 1 }}</span>\n    -\n    <span>\n      {{ [dataTable.offset + dataTable.limit, dataTable.itemCount] | min }}\n    </span>\n    /\n    <span>{{ dataTable.itemCount }}</span>\n  </div>\n  <div class=\"pagination-controllers d-flex\">\n    <div class=\"pagination-limit\" *ngIf=\"show_limit\">\n      <div class=\"input-group\">\n        <span class=\"input-group-prepend\">\n          <span class=\"input-group-text\">\n            {{ dataTable.translations.paginationLimit }}:\n          </span>\n        </span>\n        <input\n          #limitInput\n          type=\"number\"\n          class=\"form-control\"\n          min=\"1\"\n          step=\"1\"\n          [ngModel]=\"limit\"\n          (blur)=\"limit = limitInput.value\"\n          (keyup.enter)=\"limit = limitInput.value\"\n          (keyup.esc)=\"limitInput.value = limit\"\n        />\n      </div>\n    </div>\n    <div class=\"pagination-pages d-flex\" *ngIf=\"maxPage > 1\">\n      <button\n        [disabled]=\"dataTable.offset <= 0\"\n        (click)=\"pageFirst()\"\n        class=\"btn btn-secondary pagination-firstpage\"\n      >\n        &laquo;\n      </button>\n      <button\n        [disabled]=\"dataTable.offset <= 0\"\n        (click)=\"pageBack()\"\n        class=\"btn btn-secondary pagination-prevpage mx-1\"\n      >\n        &lsaquo;\n      </button>\n      <div class=\"pagination-page\" *ngIf=\"show_input\">\n        <div class=\"input-group\">\n          <input\n            #pageInput\n            type=\"number\"\n            class=\"form-control\"\n            min=\"1\"\n            step=\"1\"\n            max=\"{{ maxPage }}\"\n            [ngModel]=\"page\"\n            (blur)=\"page = pageInput.value\"\n            (keyup.enter)=\"page = pageInput.value\"\n            (keyup.esc)=\"pageInput.value = page\"\n          />\n          <div class=\"input-group-prepend\">\n            <span class=\"input-group-text\">\n              <span>/</span>\n              <span>{{ dataTable.lastPage }}</span>\n            </span>\n          </div>\n        </div>\n      </div>\n      <div class=\"pagination-page\" *ngIf=\"show_numbers\">\n        <button\n          *ngFor=\"let i of createPageRange(maxPage, page)\"\n          [disabled]=\"i == page\"\n          (click)=\"page = i\"\n          class=\"btn btn-default\"\n        >\n          {{ i }}\n        </button>\n      </div>\n      <button\n        [disabled]=\"dataTable.offset + dataTable.limit >= dataTable.itemCount\"\n        (click)=\"pageForward()\"\n        class=\"btn btn-secondary pagination-nextpage mx-1\"\n      >\n        &rsaquo;\n      </button>\n      <button\n        [disabled]=\"dataTable.offset + dataTable.limit >= dataTable.itemCount\"\n        (click)=\"pageLast()\"\n        class=\"btn btn-secondary pagination-lastpage\"\n      >\n        &raquo;\n      </button>\n    </div>\n  </div>\n</div>\n",
                styles: [".pagination-box{position:relative;margin-top:-10px}.pagination-range{display:flex;align-items:center;margin-left:3px}.pagination-range span{margin:0 4px}.pagination-range span:last-child{margin-right:0;margin-left:4px}.pagination-controllers input{min-width:60px;text-align:right}.pagination-limit{margin-right:25px;min-width:150px;max-width:200px}.pagination-page{width:110px}.pagination-reload{color:gray;font-size:12px}"]
            }]
    }], function () { return [{ type: DataTable, decorators: [{
                type: Inject,
                args: [forwardRef(() => DataTable)]
            }] }]; }, { show_range: [{
            type: Input
        }], show_limit: [{
            type: Input
        }], show_input: [{
            type: Input
        }], show_numbers: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableHeader, [{
        type: Component,
        args: [{
                selector: 'data-table-header',
                template: "<div class=\"data-table-header d-flex justify-content-between\">\n  <h4 class=\"title\">{{ dataTable.headerTitle }}</h4>\n  <div class=\"button-panel\">\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary btn-sm refresh-button mr-1\"\n      (click)=\"dataTable.reloadItems()\"\n      [attr.aria-label]=\"dataTable.translations.headerReload\"\n      [title]=\"dataTable.translations.headerReload\"\n    >\n      <span class=\"fa fa-refresh\"></span>\n    </button>\n    <button\n      type=\"button\"\n      class=\"btn btn-secondary btn-sm column-selector-button\"\n      [class.active]=\"columnSelectorOpen\"\n      (click)=\"\n        columnSelectorOpen = !columnSelectorOpen; $event.stopPropagation()\n      \"\n      [attr.aria-label]=\"dataTable.translations.headerColumnSelector\"\n      [title]=\"dataTable.translations.headerColumnSelector\"\n    >\n      <span class=\"fa fa-list\"></span>\n    </button>\n    <div class=\"column-selector-wrapper\" (click)=\"$event.stopPropagation()\">\n      <div *ngIf=\"columnSelectorOpen\" class=\"column-selector-box card\">\n        <div\n          *ngIf=\"dataTable.expandableRows\"\n          class=\"column-selector-fixed-column form-check\"\n        >\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            [(ngModel)]=\"dataTable.expandColumnVisible\"\n            id=\"check1\"\n          />\n          <label class=\"form-check-label\" for=\"check1\">\n            {{ dataTable.translations.expandColumn }}\n          </label>\n        </div>\n\n        <div\n          *ngIf=\"dataTable.indexColumn\"\n          class=\"column-selector-fixed-column form-check\"\n        >\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            [(ngModel)]=\"dataTable.indexColumnVisible\"\n            id=\"check2\"\n          />\n          <label class=\"form-check-label\" for=\"check2\">\n            {{ dataTable.translations.indexColumn }}\n          </label>\n        </div>\n\n        <div\n          *ngIf=\"dataTable.selectColumn\"\n          class=\"column-selector-fixed-column form-check\"\n        >\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            [(ngModel)]=\"dataTable.selectColumnVisible\"\n            id=\"check3\"\n          />\n          <label class=\"form-check-label\" for=\"check3\">\n            {{ dataTable.translations.selectColumn }}\n          </label>\n        </div>\n\n        <div\n          *ngFor=\"let column of dataTable.columns; index as i\"\n          class=\"column-selector-column form-check\"\n        >\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            [(ngModel)]=\"column.visible\"\n            [id]=\"'col-check' + i\"\n          />\n          <label class=\"form-check-label\" [for]=\"'col-check' + i\">\n            {{ column.header }}\n          </label>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                host: {
                    '(document:click)': '_closeSelector()'
                },
                styles: [".data-table-header{min-height:25px;margin-bottom:10px}.title{margin:5px 0 0 5px}.column-selector-wrapper{position:relative}.column-selector-box{box-shadow:0 0 10px #d3d3d3;width:150px;padding:10px;position:absolute;right:0;top:1px;z-index:1060}.column-selector-fixed-column{font-style:italic}"]
            }]
    }], function () { return [{ type: DataTable, decorators: [{
                type: Inject,
                args: [forwardRef(() => DataTable)]
            }] }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PixelConverter, [{
        type: Pipe,
        args: [{
                name: 'px'
            }]
    }], null, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Hide, [{
        type: Directive,
        args: [{ selector: '[hide]', inputs: ['hide'] }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: Renderer }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MinPipe, [{
        type: Pipe,
        args: [{
                name: 'min'
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DataTableModule, { declarations: function () { return [DataTable,
        DataTableColumn,
        DataTableRow,
        DataTablePagination,
        DataTableHeader,
        PixelConverter,
        Hide,
        MinPipe]; }, imports: function () { return [CommonModule, FormsModule]; }, exports: function () { return [DataTable,
        DataTableColumn]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [
                    DataTable,
                    DataTableColumn,
                    DataTableRow,
                    DataTablePagination,
                    DataTableHeader,
                    PixelConverter,
                    Hide,
                    MinPipe
                ],
                exports: [DataTable, DataTableColumn]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DATA_TABLE_DIRECTIVES, DataTable, DataTableColumn, DataTableHeader, DataTableModule, DataTablePagination, DataTableResource, DataTableRow, defaultTranslations, PixelConverter as ɵa, Hide as ɵb, MinPipe as ɵc };

//# sourceMappingURL=ismatjon-angular-data-table.js.map